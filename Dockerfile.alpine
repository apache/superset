#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

######################################################################
# PY stage that simply does a pip install on our requirements
######################################################################
ARG PY_VER=3.7.9-alpine
FROM python:${PY_VER} AS superset-py

RUN set -eux; \
    \
    mkdir /app; \
    \
    apk update; \
    apk add --no-cache \
      patch sed bash \
      autoconf g++ git unzip cmake make linux-headers \
      flex bison \
      curl \
      samurai \
      pkgconf \
      openblas-dev \
      cyrus-sasl-dev \
      libexecinfo-dev \
      libaio-dev \
      libffi-dev \
      openldap-dev \
      openssl-dev \
      mariadb-connector-c-dev \
      freetds-dev \
      postgresql-dev \
      zlib-dev \
      tiff-dev \
      freetype-dev \
      libwebp-dev \
      openjpeg-dev \
      libimagequant-dev \
      libjpeg; \
    \
    rm -rf /var/cache/apk/*

# First, we just wanna install requirements, which will allow us to utilize the cache
# in order to only build if and only if requirements change
COPY ./requirements/*.txt  /app/requirements/
COPY setup.py MANIFEST.in README.md /app/
COPY superset-frontend/package.json /app/superset-frontend/
COPY ./docker/pip/ /scripts
RUN set -eux; \
    \
    cd /app; \
    mkdir -p superset/static; \
    touch superset/static/version_info.json; \
    export ARROW_VERSION=3.0.0; \
    export NUMPY_VERSION=1.19.4; \
    export NO_INSTALL_BUILD_TOOLS=true; \
    export ARROW_VERBOSE_THIRDPARTY_BUILD=ON; \
    /scripts/build_pyarrow.sh; \
    export REQUIREMENTS_TXT=./requirements/local.txt; \
    /scripts/install_requirements.sh; \
    export REQUIREMENTS_TXT=./requirements/docker.txt; \
    /scripts/install_requirements.sh


######################################################################
# Node stage to deal with static asset construction
######################################################################
FROM node:14-alpine AS superset-node

ARG NPM_VER=7
RUN npm install -g npm@${NPM_VER}

ARG NPM_BUILD_CMD="build"
ENV BUILD_CMD=${NPM_BUILD_CMD}

# NPM ci first, as to NOT invalidate previous steps except for when package.json changes
RUN mkdir -p /app/superset-frontend
RUN mkdir -p /app/superset/assets
COPY ./docker/frontend-mem-nag.sh /
COPY ./superset-frontend/package* /app/superset-frontend/
RUN set -eux; \
    \
    apk add --no-cache bash sed curl patch; \
    /frontend-mem-nag.sh; \
    cd /app/superset-frontend; \
    npm ci

# Next, copy in the rest and let webpack do its thing
COPY ./superset-frontend /app/superset-frontend
# This is BY FAR the most expensive step (thanks Terser!)
RUN set -eux; \
    \
    cd /app/superset-frontend; \
    npm run ${BUILD_CMD}; \
    rm -rf node_modules


######################################################################
# Final lean image...
######################################################################
ARG PY_VER=3.7.9-alpine
FROM python:${PY_VER} AS lean

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    FLASK_ENV=production \
    FLASK_APP="superset.app:create_app()" \
    PYTHONPATH="/app/pythonpath" \
    SUPERSET_HOME="/app/superset_home" \
    SUPERSET_PORT=8080

RUN set -eux; \
    \
    addgroup -g 1001 superset; \
    adduser -G superset -u 1001 -s /bin/bash -D superset; \
    \
    mkdir -p ${SUPERSET_HOME} ${PYTHONPATH}; \
    \
    apk update; \
    apk add --no-cache \
        bash \
        curl \
        libstdc++ \
        libexecinfo \
        libaio \
        libffi \
        openldap \
        openssl \
        cyrus-sasl \
        cyrus-sasl-gssapiv2 \
        mariadb-connector-c \
        freetds \
        postgresql-client \
        openblas \
        zlib \
        tiff \
        freetype \
        libwebp \
        openjpeg \
        libimagequant \
        libjpeg \
        patch \
        sed \
        chromium chromium-chromedriver; \
    \
    rm -rf /var/cache/apk/*

COPY ./docker/pip/ /scripts
RUN set -eux; \
    \
    bash -c 'source /scripts/libsetup.sh && apk_add_repos'; \
    apk add --no-cache \
        thrift-dev@edge_main

COPY --from=superset-py /usr/local/lib/python3.7/site-packages/ /usr/local/lib/python3.7/site-packages/
# Copying site-packages doesn't move the CLIs, so let's copy them one by one
COPY --from=superset-py /usr/local/bin/gunicorn /usr/local/bin/celery /usr/local/bin/flask /usr/bin/
COPY --from=superset-node /app/superset/static/assets /app/superset/static/assets
COPY --from=superset-node /app/superset-frontend /app/superset-frontend

## Lastly, let's install superset itself
COPY superset /app/superset
COPY setup.py MANIFEST.in README.md /app/
RUN set -eux; \
    \
    cd /app; \
    chown -R superset:superset *; \
    pip install -e .

COPY ./docker/docker-entrypoint.sh /usr/bin/

WORKDIR /app

USER superset

HEALTHCHECK CMD curl -f "http://localhost:$SUPERSET_PORT/health"

EXPOSE ${SUPERSET_PORT}

ENTRYPOINT ["/usr/bin/docker-entrypoint.sh"]

######################################################################
# Dev image...
######################################################################
FROM lean AS dev
ARG GECKODRIVER_VERSION=v0.28.0
ARG FIREFOX_VERSION=88.0

COPY ./requirements/*.txt ./docker/requirements-*.txt/ /app/requirements/

USER root

# Install GeckoDriver WebDriver
RUN set -eux; \
    \
    URL="https://github.com/mozilla/geckodriver/releases/download" \
    URL="$URL/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz"; \
    wget $URL -O /tmp/geckodriver.tar.gz; \
    tar xvfz /tmp/geckodriver.tar.gz -C /tmp; \
    mv /tmp/geckodriver /usr/local/bin/geckodriver; \
    rm /tmp/geckodriver.tar.gz;

# Install Firefox
RUN set -eux; \
    \
    apk add --no-cache firefox;

# Cache everything for dev purposes...
RUN set -eux; \
    \
    cd /app; \
    pip install --no-cache -r requirements/docker.txt; \
    pip install --no-cache -r requirements/requirements-local.txt || true
USER superset


######################################################################
# CI image...
######################################################################
FROM lean AS ci

COPY --chown=superset ./docker/docker-bootstrap.sh /app/docker/
COPY --chown=superset ./docker/docker-init.sh /app/docker/
COPY --chown=superset ./docker/docker-ci.sh /app/docker/

RUN chmod a+x /app/docker/*.sh

CMD /app/docker/docker-ci.sh
