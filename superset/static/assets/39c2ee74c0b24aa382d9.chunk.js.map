{"version":3,"file":"39c2ee74c0b24aa382d9.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx","webpack://superset/./packages/superset-ui-core/src/math-expression/index.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme,\n} from '@superset-ui/core';\n\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from 'src/modules/AnnotationTypes';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () => (\n  <NotFoundContentWrapper>\n    <EmptyStateSmall\n      title={t('No annotation layers')}\n      description={\n        <span>\n          {t('Add an annotation layer')}{' '}\n          <a\n            href=\"/annotationlayer/list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('here')}\n          </a>\n          .\n        </span>\n      }\n      image=\"empty.svg\"\n    />\n  </NotFoundContentWrapper>\n);\n\nclass AnnotationLayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      showLabel,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      showLabel,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      isLoadingOptions: true,\n      valueOptions: [],\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType =\n      this.handleAnnotationSourceType.bind(this);\n    this.handleValue = this.handleValue.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormulaAnnotation(expression, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return isValidExpression(expression);\n    }\n    return true;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(!this.isValidFormulaAnnotation(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({ sourceType, value: null, isLoadingOptions: true });\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: [],\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        SupersetClient.get({\n          endpoint: '/api/v1/annotation_layer/',\n        }).then(({ json }) => {\n          const layers = json\n            ? json.result.map(layer => ({\n                value: layer.id,\n                label: layer.name,\n              }))\n            : [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers,\n          });\n        });\n      } else if (requiresQuery(sourceType)) {\n        SupersetClient.get({ endpoint: '/superset/user_slices' }).then(\n          ({ json }) => {\n            const registry = getChartMetadataRegistry();\n            this.setState({\n              isLoadingOptions: false,\n              valueOptions: json\n                .filter(x => {\n                  const metadata = registry.get(x.viz_type);\n                  return (\n                    metadata && metadata.canBeAnnotationType(annotationType)\n                  );\n                })\n                .map(x => ({\n                  value: x.id,\n                  label: x.title,\n                  slice: {\n                    ...x,\n                    data: {\n                      ...x.data,\n                      groupby: x.data.groupby?.map(column =>\n                        getColumnLabel(column),\n                      ),\n                    },\n                  },\n                })),\n            });\n          },\n        );\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [],\n        });\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'value',\n        'overrides',\n        'show',\n        'showLabel',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      <span\n        css={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n        }}\n        title={option.label}\n      >\n        {option.label}\n      </span>\n    );\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions,\n    } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType)\n            .map(x => x.label)\n            .join(', '),\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <SelectControl\n          ariaLabel={t('Annotation layer value')}\n          name=\"annotation-layer-value\"\n          showHeader\n          hovered\n          description={description}\n          label={label}\n          placeholder=\"\"\n          options={valueOptions}\n          isLoading={isLoadingOptions}\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={!value ? ['Mandatory'] : []}\n          optionRenderer={this.renderOption}\n          notFoundContent={<NotFoundContent />}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={\n            !this.isValidFormulaAnnotation(value, annotationType)\n              ? [t('Bad formula.')]\n              : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n    const { slice } = valueOptions.find(x => x.value === value) || {};\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n              to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                ariaLabel={t('Annotation layer time column')}\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? t('Interval start column')\n                    : t('Event time column')\n                }\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                ariaLabel={t('Annotation layer interval end')}\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label={t('Interval End column')}\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={value => this.setState({ intervalEndColumn: value })}\n              />\n            )}\n            <SelectControl\n              ariaLabel={t('Annotation layer title column')}\n              hovered\n              name=\"annotation-layer-title\"\n              label={t('Title Column')}\n              description={t('Pick a title for you annotation.')}\n              options={[{ value: '', label: t('None') }].concat(columns)}\n              value={titleColumn}\n              onChange={value => this.setState({ titleColumn: value })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                ariaLabel={t('Annotation layer description columns')}\n                hovered\n                name=\"annotation-layer-title\"\n                label={t('Description Columns')}\n                description={t(\n                  \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\",\n                )}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={value => this.setState({ descriptionColumns: value })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label={t('Override time range')}\n                description={t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label={t('Override time grain')}\n                description={t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label={t('Time Shift')}\n                description={t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`)}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          ariaLabel={t('Annotation layer stroke')}\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: t('Solid') },\n            { value: 'dashed', label: t('Dashed') },\n            { value: 'longDashed', label: t('Long dashed') },\n            { value: 'dotted', label: t('Dotted') },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          ariaLabel={t('Annotation layer opacity')}\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: t('Solid') },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={value => this.setState({ opacity: value })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              {t('Automatic Color')}\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label={t('Show Markers')}\n            description={t('Shows or hides markers for the time series')}\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label={t('Hide Line')}\n            description={t('Hides the Line for the time series')}\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n      this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: this.props.theme.colors.error.base }}>\n            ERROR: {this.props.error}\n          </span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <CheckboxControl\n                name=\"annotation-label-show\"\n                label={t('Show label')}\n                value={showLabel}\n                hovered\n                description={t('Whether to always show the annotation label')}\n                onChange={v => this.setState({ showLabel: v })}\n              />\n              <SelectControl\n                ariaLabel={t('Annotation layer type')}\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  ariaLabel={t('Annotation source type')}\n                  hovered\n                  description={t('Choose the source of your annotations')}\n                  label={t('Annotation source')}\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  notFoundContent={<NotFoundContent />}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n\nexport default withTheme(AnnotationLayer);\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport mexp from 'math-expression-evaluator';\n\nconst REPLACE_OPERATORS: [RegExp, string][] = [\n  [new RegExp(/==/g), 'Eq'],\n  [new RegExp(/>=/g), 'Gte'],\n  [new RegExp(/<=/g), 'Lte'],\n  [new RegExp(/>/g), 'Gt'],\n  [new RegExp(/</g), 'Lt'],\n];\n\nconst TOKENS = [\n  {\n    type: 3,\n    token: 'x',\n    show: 'x',\n    value: 'x',\n  },\n  {\n    type: 2,\n    token: '&',\n    show: '&',\n    value: (a: number, b: number): number => a & b,\n  },\n  {\n    type: 2,\n    token: '|',\n    show: '|',\n    value: (a: number, b: number): number => a | b,\n  },\n  {\n    type: 2,\n    token: 'and',\n    show: 'and',\n    value: (a: number, b: number): number => a && b,\n  },\n  {\n    type: 2,\n    token: 'xor',\n    show: 'xor',\n    value: (a: number, b: number): number => a ^ b,\n  },\n  {\n    type: 2,\n    token: 'or',\n    show: 'or',\n    value: (a: number, b: number): number => Number(a || b),\n  },\n  {\n    type: 2,\n    token: 'Eq',\n    show: 'Eq',\n    value: (a: number, b: number): number => Number(a === b),\n  },\n  {\n    type: 2,\n    token: 'Lt',\n    show: 'Lt',\n    value: (a: number, b: number): number => Number(a < b),\n  },\n  {\n    type: 2,\n    token: 'Lte',\n    show: 'Lte',\n    value: (a: number, b: number): number => Number(a <= b),\n  },\n  {\n    type: 2,\n    token: 'Gt',\n    show: 'Gt',\n    value: (a: number, b: number): number => Number(a > b),\n  },\n  {\n    type: 2,\n    token: 'Gte',\n    show: 'Gte',\n    value: (a: number, b: number): number => Number(a >= b),\n  },\n];\n\nexport function evalExpression(expression: string, value: number): number {\n  let parsedExpression = expression;\n  // replace `<` with `Lt` (and others) to avoid clashes with builtin function operators\n  // that are not needed in Superset.\n  REPLACE_OPERATORS.forEach(([key, value]) => {\n    parsedExpression = parsedExpression.replace(key, value);\n  });\n  const subExpressions = String(parsedExpression).split('=');\n  parsedExpression = subExpressions[1] ?? subExpressions[0];\n  // we can ignore the type requirement on `TOKENS`, as value is always `number`\n  // and doesn't need to consider `number | undefined`.\n  // @ts-ignore\n  return Number(mexp.eval(parsedExpression, TOKENS, { x: value }));\n}\n\nexport function isValidExpression(expression: string): boolean {\n  try {\n    evalExpression(expression, 0);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n"],"names":["AUTOMATIC_COLOR","propTypes","name","PropTypes","annotationType","sourceType","color","opacity","style","width","showMarkers","hideLine","value","overrides","show","showLabel","titleColumn","descriptionColumns","timeColumn","intervalEndColumn","vizType","error","colorScheme","addAnnotationLayer","removeAnnotationLayer","close","defaultProps","DEFAULT_ANNOTATION_TYPE","NotFoundContentWrapper","styled","NotFoundContent","title","t","description","href","target","rel","image","AnnotationLayer","React","constructor","props","super","time_range","since","until","metadata","getChartMetadataRegistry","get","supportedAnnotationTypes","validAnnotationType","this","state","isNew","isLoadingOptions","valueOptions","submitAnnotation","bind","deleteAnnotation","applyAnnotation","fetchOptions","handleAnnotationType","handleAnnotationSourceType","handleValue","isValidForm","componentDidMount","componentDidUpdate","prevProps","prevState","getSupportedSourceTypes","sources","entries","filter","chartMetadata","canBeAnnotationType","map","key","label","ANNOTATION_TYPES_METADATA","supportNativeSource","unshift","ANNOTATION_SOURCE_TYPES_METADATA","isValidFormulaAnnotation","expression","ANNOTATION_TYPES","isValidExpression","errors","validateNonEmpty","ANNOTATION_SOURCE_TYPES","push","x","length","setState","prevSourceType","SupersetClient","endpoint","then","json","layers","result","layer","id","requiresQuery","registry","viz_type","slice","data","groupby","column","getColumnLabel","newAnnotation","forEach","field","renderOption","option","css","renderValueConfiguration","join","ariaLabel","showHeader","hovered","placeholder","options","isLoading","onChange","validationErrors","optionRenderer","notFoundContent","renderSliceConfiguration","find","columns","concat","all_columns","timeColumnOptions","include_time","marginRight","isSelected","info","clearable","v","multi","marginTop","time_grain_sqla","granularity","time_shift","renderDisplayConfiguration","getCategoricalSchemeRegistry","colors","toLowerCase","display","flexDirection","onChangeComplete","hex","marginBottom","buttonStyle","buttonSize","onClick","isInt","render","isValid","type","supportedSourceTypes","theme","base","justifyContent","disabled","withTheme","REPLACE_OPERATORS","RegExp","TOKENS","token","a","b","Number","evalExpression","parsedExpression","replace","subExpressions","String","split","mexp","err"],"sourceRoot":""}