{"version":3,"file":"cb761344203d9deb7872.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/Sunburst/EchartsSunburst.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport { BinaryQueryObjectFilterClause } from '@superset-ui/core';\nimport { SunburstTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { EventHandlers, TreePathInfo } from '../types';\n\nexport const extractTreePathInfo = (treePathInfo: TreePathInfo[] | undefined) =>\n  (treePathInfo ?? [])\n    .map(pathInfo => pathInfo?.name || '')\n    .filter(path => path !== '');\n\nexport default function EchartsSunburst(props: SunburstTransformedProps) {\n  const {\n    height,\n    width,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    selectedValues,\n    formData,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n  } = props;\n\n  const { columns } = formData;\n\n  const getCrossFilterDataMask = useCallback(\n    (treePathInfo: TreePathInfo[]) => {\n      const treePath = extractTreePathInfo(treePathInfo);\n      const name = treePath.join(',');\n      const selected = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(name)) {\n        values = selected.filter(v => v !== name);\n      } else {\n        values = [name];\n      }\n      const labels = values.map(value => labelMap[value]);\n\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0 || !columns\n                ? []\n                : columns.map((col, idx) => {\n                    const val = labels.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            value: labels.length ? labels : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(name),\n      };\n    },\n    [columns, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (treePathInfo: TreePathInfo[]) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n\n      setDataMask(getCrossFilterDataMask(treePathInfo).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { treePathInfo } = props;\n      handleChange(treePathInfo);\n    },\n    contextmenu: eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, treePathInfo } = eventParams;\n        const { records } = data;\n        const treePath = extractTreePathInfo(eventParams.treePathInfo);\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        if (columns?.length) {\n          treePath.forEach((path, i) =>\n            drillToDetailFilters.push({\n              col: columns[i],\n              op: '==',\n              val: records[i],\n              formattedVal: path,\n            }),\n          );\n        }\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(treePathInfo),\n        });\n      }\n    },\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["extractTreePathInfo","treePathInfo","map","pathInfo","name","filter","path","EchartsSunburst","props","height","width","echartOptions","setDataMask","labelMap","selectedValues","formData","onContextMenu","refs","emitCrossFilters","columns","getCrossFilterDataMask","useCallback","join","selected","Object","values","v","labels","value","dataMask","extraFormData","filters","length","col","idx","val","op","filterState","isCurrentValueSelected","handleChange","eventHandlers","click","contextmenu","eventParams","event","stop","data","records","treePath","pointerEvent","drillToDetailFilters","forEach","i","push","formattedVal","clientX","clientY","drillToDetail","crossFilter","Styles","styled","Echart","ref","zrEventHandlers","divRef","useRef","chartRef","currentSelection","useMemo","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","init","entries","handler","off","on","getZr","setOption","dispatchAction","type","dataIndex","handleSizeChange","resize","dispose","useLayoutEffect","forwardRef"],"sourceRoot":""}