{"version":3,"file":"21d2fb529e44fcf67add.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/MixedTimeseries/EchartsMixedTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport {\n  AxisType,\n  DataRecordValue,\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n} from '@superset-ui/core';\nimport { EchartsMixedTimeseriesChartTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { EventHandlers } from '../types';\nimport { currentSeries } from '../utils/series';\n\nexport default function EchartsMixedTimeseries({\n  height,\n  width,\n  echartOptions,\n  setDataMask,\n  labelMap,\n  labelMapB,\n  groupby,\n  groupbyB,\n  selectedValues,\n  formData,\n  emitCrossFilters,\n  seriesBreakdown,\n  onContextMenu,\n  xValueFormatter,\n  xAxis,\n  refs,\n}: EchartsMixedTimeseriesChartTransformedProps) {\n  const isFirstQuery = useCallback(\n    (seriesIndex: number) => seriesIndex < seriesBreakdown,\n    [seriesBreakdown],\n  );\n\n  const getCrossFilterDataMask = useCallback(\n    (seriesName, seriesIndex) => {\n      const selected: string[] = Object.values(selectedValues || {});\n      let values: string[];\n      if (selected.includes(seriesName)) {\n        values = selected.filter(v => v !== seriesName);\n      } else {\n        values = [seriesName];\n      }\n\n      const currentGroupBy = isFirstQuery(seriesIndex) ? groupby : groupbyB;\n      const currentLabelMap = isFirstQuery(seriesIndex) ? labelMap : labelMapB;\n      const groupbyValues = values\n        .map(value => currentLabelMap?.[value])\n        .filter(value => !!value);\n\n      return {\n        dataMask: {\n          extraFormData: {\n            // @ts-ignore\n            filters:\n              values.length === 0\n                ? []\n                : [\n                    ...currentGroupBy.map((col, idx) => {\n                      const val: DataRecordValue[] = groupbyValues.map(\n                        v => v[idx],\n                      );\n                      if (val === null || val === undefined)\n                        return {\n                          col,\n                          op: 'IS NULL' as const,\n                        };\n                      return {\n                        col,\n                        op: 'IN' as const,\n                        val: val as (string | number | boolean)[],\n                      };\n                    }),\n                  ],\n          },\n          filterState: {\n            value: !groupbyValues.length ? null : groupbyValues,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(seriesName),\n      };\n    },\n    [groupby, groupbyB, isFirstQuery, labelMap, labelMapB, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (seriesName: string, seriesIndex: number) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n\n      setDataMask(getCrossFilterDataMask(seriesName, seriesIndex).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { seriesName, seriesIndex } = props;\n      handleChange(seriesName, seriesIndex);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: params => {\n      currentSeries.name = params.seriesName;\n    },\n    contextmenu: eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName, seriesIndex } = eventParams;\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        if (data) {\n          const values = [\n            ...(eventParams.name ? [eventParams.name] : []),\n            ...(isFirstQuery(seriesIndex) ? labelMap : labelMapB)[\n              eventParams.seriesName\n            ],\n          ];\n          if (xAxis.type === AxisType.time) {\n            drillToDetailFilters.push({\n              col:\n                xAxis.label === DTTM_ALIAS\n                  ? formData.granularitySqla\n                  : xAxis.label,\n              grain: formData.timeGrainSqla,\n              op: '==',\n              val: data[0],\n              formattedVal: xValueFormatter(data[0]),\n            });\n          }\n          [\n            ...(xAxis.type === AxisType.category ? [xAxis.label] : []),\n            ...(isFirstQuery(seriesIndex)\n              ? formData.groupby\n              : formData.groupbyB),\n          ].forEach((dimension, i) =>\n            drillToDetailFilters.push({\n              col: dimension,\n              op: '==',\n              val: values[i],\n              formattedVal: String(values[i]),\n            }),\n          );\n        }\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName, seriesIndex),\n        });\n      }\n    },\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["EchartsMixedTimeseries","height","width","echartOptions","setDataMask","labelMap","labelMapB","groupby","groupbyB","selectedValues","formData","emitCrossFilters","seriesBreakdown","onContextMenu","xValueFormatter","xAxis","refs","isFirstQuery","useCallback","seriesIndex","getCrossFilterDataMask","seriesName","selected","Object","values","filter","v","currentGroupBy","currentLabelMap","groupbyValues","map","value","dataMask","extraFormData","filters","length","col","idx","val","op","filterState","isCurrentValueSelected","handleChange","eventHandlers","click","props","mouseout","currentSeries","mouseover","params","contextmenu","eventParams","event","stop","data","pointerEvent","drillToDetailFilters","name","type","AxisType","push","label","DTTM_ALIAS","granularitySqla","grain","timeGrainSqla","formattedVal","forEach","dimension","i","String","clientX","clientY","drillToDetail","crossFilter","Styles","styled","Echart","ref","zrEventHandlers","divRef","useRef","chartRef","currentSelection","useMemo","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","init","entries","handler","off","on","getZr","setOption","dispatchAction","dataIndex","handleSizeChange","resize","dispose","useLayoutEffect","forwardRef"],"sourceRoot":""}