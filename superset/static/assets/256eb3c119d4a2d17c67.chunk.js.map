{"version":3,"file":"256eb3c119d4a2d17c67.chunk.js","mappings":"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","sources":["webpack://superset/./src/views/CRUD/data/database/DatabaseList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { useSelector } from 'react-redux';\nimport { useQueryParams, BooleanParam } from 'use-query-params';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\n\nimport Loading from 'src/components/Loading';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, uploadUserPerms } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport ListView, { FilterOperator, Filters } from 'src/components/ListView';\nimport handleResourceExport from 'src/utils/export';\nimport { ExtensionConfigs } from 'src/views/components/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport type { MenuObjectProps } from 'src/types/bootstrapTypes';\nimport DatabaseModal from './DatabaseModal';\n\nimport { DatabaseObject } from './types';\n\nconst PAGE_SIZE = 25;\n\ninterface DatabaseDeleteObject extends DatabaseObject {\n  chart_count: number;\n  dashboard_count: number;\n  sqllab_tab_count: number;\n}\ninterface DatabaseListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n}\n\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .action-button {\n    display: inline-block;\n    height: 100%;\n  }\n`;\n\nfunction BooleanDisplay({ value }: { value: Boolean }) {\n  return value ? <IconCheck /> : <IconCancelX />;\n}\n\nfunction DatabaseList({ addDangerToast, addSuccessToast }: DatabaseListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: databaseCount,\n      resourceCollection: databases,\n    },\n    hasPerm,\n    fetchData,\n    refreshData,\n  } = useListViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n  const user = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const showDatabaseModal = getUrlParam(URL_PARAMS.showDatabaseModal);\n\n  const [query, setQuery] = useQueryParams({\n    databaseAdded: BooleanParam,\n  });\n\n  const [databaseModalOpen, setDatabaseModalOpen] = useState<boolean>(\n    showDatabaseModal || false,\n  );\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] =\n    useState<DatabaseDeleteObject | null>(null);\n  const [currentDatabase, setCurrentDatabase] = useState<DatabaseObject | null>(\n    null,\n  );\n  const [allowUploads, setAllowUploads] = useState<boolean>(false);\n  const isAdmin = isUserAdmin(user);\n  const showUploads = allowUploads || isAdmin;\n\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const { roles } = user;\n  const {\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  } = useSelector<any, ExtensionConfigs>(state => state.common.conf);\n\n  useEffect(() => {\n    if (query?.databaseAdded) {\n      setQuery({ databaseAdded: undefined });\n      refreshData();\n    }\n  }, [query, setQuery, refreshData]);\n\n  const openDatabaseDeleteModal = (database: DatabaseObject) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/database/${database.id}/related_objects/`,\n    })\n      .then(({ json = {} }) => {\n        setDatabaseCurrentlyDeleting({\n          ...database,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n          sqllab_tab_count: json.sqllab_tab_states.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching database related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  function handleDatabaseDelete({ id, database_name: dbName }: DatabaseObject) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        addSuccessToast(t('Deleted: %s', dbName));\n\n        // Delete user-selected db from local storage\n        setItem(LocalStorageKeys.db, null);\n\n        // Close delete modal\n        setDatabaseCurrentlyDeleting(null);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg)),\n      ),\n    );\n  }\n\n  function handleDatabaseEditModal({\n    database = null,\n    modalOpen = false,\n  }: { database?: DatabaseObject | null; modalOpen?: boolean } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const { canUploadCSV, canUploadColumnar, canUploadExcel } = uploadUserPerms(\n    roles,\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  );\n\n  const isDisabled = isAdmin && !allowUploads;\n\n  const uploadDropdownMenu = [\n    {\n      label: t('Upload file to database'),\n      childs: [\n        {\n          label: t('Upload CSV'),\n          name: 'Upload CSV file',\n          url: '/csvtodatabaseview/form',\n          perm: canUploadCSV && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload columnar file'),\n          name: 'Upload columnar file',\n          url: '/columnartodatabaseview/form',\n          perm: canUploadColumnar && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload Excel file'),\n          name: 'Upload Excel file',\n          url: '/exceltodatabaseview/form',\n          perm: canUploadExcel && showUploads,\n          disable: isDisabled,\n        },\n      ],\n    },\n  ];\n\n  const hasFileUploadEnabled = () => {\n    const payload = {\n      filters: [\n        { col: 'allow_file_upload', opr: 'upload_is_enabled', value: true },\n      ],\n    };\n    SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${rison.encode(payload)}`,\n    }).then(({ json }: Record<string, any>) => {\n      // There might be some existings Gsheets and Clickhouse DBs\n      // with allow_file_upload set as True which is not possible from now on\n      const allowedDatabasesWithFileUpload =\n        json?.result?.filter(\n          (database: any) => database?.engine_information?.supports_file_upload,\n        ) || [];\n      setAllowUploads(allowedDatabasesWithFileUpload?.length >= 1);\n    });\n  };\n\n  useEffect(() => hasFileUploadEnabled(), [databaseModalOpen]);\n\n  const filteredDropDown = uploadDropdownMenu.reduce((prev, cur) => {\n    // eslint-disable-next-line no-param-reassign\n    cur.childs = cur.childs.filter(item => item.perm);\n    if (!cur.childs.length) return prev;\n    prev.push(cur);\n    return prev;\n  }, [] as MenuObjectProps[]);\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Databases',\n    dropDownLinks: filteredDropDown,\n    name: t('Databases'),\n  };\n\n  if (canCreate) {\n    menuData.buttons = [\n      {\n        'data-test': 'btn-create-database',\n        name: (\n          <>\n            <i className=\"fa fa-plus\" /> {t('Database')}{' '}\n          </>\n        ),\n        buttonStyle: 'primary',\n        onClick: () => {\n          // Ensure modal will be opened in add mode\n          handleDatabaseEditModal({ modalOpen: true });\n        },\n      },\n    ];\n  }\n\n  function handleDatabaseExport(database: DatabaseObject) {\n    if (database.id === undefined) {\n      return;\n    }\n\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'database_name',\n        Header: t('Database'),\n      },\n      {\n        accessor: 'backend',\n        Header: t('Backend'),\n        size: 'lg',\n        disableSortBy: true, // TODO: api support for sorting by 'backend'\n      },\n      {\n        accessor: 'allow_run_async',\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_run_async: allowRunAsync },\n          },\n        }: {\n          row: { original: { allow_run_async: boolean } };\n        }) => <BooleanDisplay value={allowRunAsync} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_dml',\n        Header: (\n          <Tooltip\n            id=\"allow-dml-header-tooltip\"\n            title={t('Allow data manipulation language')}\n            placement=\"top\"\n          >\n            <span>{t('DML')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_dml: allowDML },\n          },\n        }: any) => <BooleanDisplay value={allowDML} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_file_upload',\n        Header: t('CSV upload'),\n        Cell: ({\n          row: {\n            original: { allow_file_upload: allowFileUpload },\n          },\n        }: any) => <BooleanDisplay value={allowFileUpload} />,\n        size: 'md',\n      },\n      {\n        accessor: 'expose_in_sqllab',\n        Header: t('Expose in SQL Lab'),\n        Cell: ({\n          row: {\n            original: { expose_in_sqllab: exposeInSqllab },\n          },\n        }: any) => <BooleanDisplay value={exposeInSqllab} />,\n        size: 'md',\n      },\n      {\n        accessor: 'created_by',\n        disableSortBy: true,\n        Header: t('Created by'),\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () =>\n            handleDatabaseEditModal({ database: original, modalOpen: true });\n          const handleDelete = () => openDatabaseDeleteModal(original);\n          const handleExport = () => handleDatabaseExport(original);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <span\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"action-button\"\n                  data-test=\"database-delete\"\n                  onClick={handleDelete}\n                >\n                  <Tooltip\n                    id=\"delete-action-tooltip\"\n                    title={t('Delete database')}\n                    placement=\"bottom\"\n                  >\n                    <Icons.Trash />\n                  </Tooltip>\n                </span>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    data-test=\"database-edit\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Expose in SQL Lab'),\n        key: 'expose_in_sql_lab',\n        id: 'expose_in_sqllab',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-filter-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        key: 'allow_run_async',\n        id: 'allow_run_async',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'database_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <DatabaseModal\n        databaseId={currentDatabase?.id}\n        show={databaseModalOpen}\n        onHide={handleDatabaseEditModal}\n        onDatabaseAdd={() => {\n          refreshData();\n        }}\n      />\n      {databaseCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The database %s is linked to %s charts that appear on %s dashboards and users have %s SQL Lab tabs using this database open. Are you sure you want to continue? Deleting the database will break those objects.',\n            databaseCurrentlyDeleting.database_name,\n            databaseCurrentlyDeleting.chart_count,\n            databaseCurrentlyDeleting.dashboard_count,\n            databaseCurrentlyDeleting.sqllab_tab_count,\n          )}\n          onConfirm={() => {\n            if (databaseCurrentlyDeleting) {\n              handleDatabaseDelete(databaseCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setDatabaseCurrentlyDeleting(null)}\n          open\n          title={t('Delete Database?')}\n        />\n      )}\n\n      <ListView<DatabaseObject>\n        className=\"database-list-view\"\n        columns={columns}\n        count={databaseCount}\n        data={databases}\n        fetchData={fetchData}\n        filters={filters}\n        initialSort={initialSort}\n        loading={loading}\n        pageSize={PAGE_SIZE}\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DatabaseList);\n"],"names":["IconCheck","styled","Icons","theme","colors","grayscale","dark1","IconCancelX","Actions","base","BooleanDisplay","value","withToasts","addDangerToast","addSuccessToast","state","loading","resourceCount","databaseCount","resourceCollection","databases","hasPerm","fetchData","refreshData","useListViewResource","t","user","useSelector","showDatabaseModal","getUrlParam","URL_PARAMS","query","setQuery","useQueryParams","databaseAdded","BooleanParam","databaseModalOpen","setDatabaseModalOpen","useState","databaseCurrentlyDeleting","setDatabaseCurrentlyDeleting","currentDatabase","setCurrentDatabase","allowUploads","setAllowUploads","isAdmin","isUserAdmin","showUploads","preparingExport","setPreparingExport","roles","CSV_EXTENSIONS","COLUMNAR_EXTENSIONS","EXCEL_EXTENSIONS","ALLOWED_EXTENSIONS","common","conf","handleDatabaseEditModal","database","modalOpen","useEffect","undefined","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","canUploadCSV","canUploadColumnar","canUploadExcel","uploadUserPerms","isDisabled","uploadDropdownMenu","label","childs","name","url","perm","disable","SupersetClient","endpoint","rison","filters","col","opr","then","json","allowedDatabasesWithFileUpload","result","filter","engine_information","supports_file_upload","length","menuData","activeChild","dropDownLinks","reduce","prev","cur","item","push","buttons","className","buttonStyle","onClick","columns","useMemo","accessor","Header","size","disableSortBy","id","title","placement","Cell","row","original","allow_run_async","allowRunAsync","allow_dml","allowDML","allow_file_upload","allowFileUpload","expose_in_sqllab","exposeInSqllab","created_by","createdBy","first_name","last_name","changed_on_delta_humanized","changedOn","role","tabIndex","openDatabaseDeleteModal","chart_count","charts","count","dashboard_count","dashboards","sqllab_tab_count","sqllab_tab_states","catch","createErrorHandler","errMsg","handleResourceExport","hidden","key","input","operator","FilterOperator","unfilteredLabel","selects","databaseId","show","onHide","onDatabaseAdd","description","database_name","onConfirm","dbName","setItem","LocalStorageKeys","handleDatabaseDelete","open","data","initialSort","desc","pageSize"],"sourceRoot":""}