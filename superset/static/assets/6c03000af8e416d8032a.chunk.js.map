{"version":3,"file":"6c03000af8e416d8032a.chunk.js","mappings":"wOA6BA,MAAMA,EAAgBC,EAAAA,GAAAA,GAAU;;WAEpB,IAAD,IAAC,MAAEC,GAAH,SAAeA,EAAMC,OAAOC,UAAUC,IAAtC;eACK,IAAD,IAAC,MAAEH,GAAH,SAAeA,EAAMI,WAAWC,MAAMC,CAAtC;EAGTC,EAAuBR,EAAAA,GAAAA,GAAU;oBAClB,IAAD,IAAC,MAAEC,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;iBACF,IAAD,IAAC,MAAER,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;;;cAGF,IAAD,IAAC,MAAER,GAAH,SAAeA,EAAMQ,QAArB;;;;;;;;qBAQQ,IAAD,IAAC,MAAER,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;;;;;;;;;sBASE,IAAD,IAAC,MAAER,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;;;;kBAIH,IAAD,IAAC,MAAER,GAAH,SAAeA,EAAMQ,QAArB;;;;;;;;;;;;;;;;aAgBJ,IAAD,IAAC,MAAER,GAAH,SAAeA,EAAMC,OAAOC,UAAUO,MAAtC;;;;;;eAMG,IAAD,IAAC,MAAET,GAAH,SAAgC,IAAjBA,EAAMQ,QAArB;QACN,IAAD,IAAC,MAAER,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;;wBAEiB,IAAD,IAAC,MAAER,GAAH,SAAeA,EAAMC,OAAOC,UAAUQ,MAAtC;qBACF,IAAD,IAAC,MAAEV,GAAH,SAAeA,EAAMQ,QAArB;;;;;;;;sBAQE,IAAD,IAAC,MAAER,GAAH,SAAgC,EAAjBA,EAAMQ,QAArB;;;EA2NtB,EAxMsE,IAUjE,IAViE,aACpEG,EADoE,cAEpEC,EAFoE,uBAGpEC,EAHoE,wBAIpEC,EAJoE,cAKpEC,EALoE,KAMpEC,EANoE,OAOpEC,EAPoE,eAQpEC,EAAiB,GARmD,kBASpEC,EAAoB,UACjB,EACH,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,WAAkB,IAC3CC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAiC,CAAC,IAC7DG,EAAuBC,IAC5BJ,EAAAA,EAAAA,WAAkB,IACbK,EAAoBC,IAAyBN,EAAAA,EAAAA,WAAkB,IAC/DO,EAAUC,IAAeR,EAAAA,EAAAA,UAAuB,KAChDS,EAAgBC,IAAqBV,EAAAA,EAAAA,WAAkB,IACvDW,EAAcC,IAAmBZ,EAAAA,EAAAA,YAElCa,EAAa,KACjBL,EAAY,IACZX,EAAkB,IAClBK,EAAa,CAAC,GACdE,GAAyB,GACzBE,GAAsB,GACtBI,GAAkB,GAClBE,EAAgB,GAAhB,GAQAE,OAAO,cAAEC,EAAF,gBAAiBC,GADpB,eAEJC,IACEC,EAAAA,EAAAA,IAAkB7B,EAAcC,GAPZ6B,IACtBP,EAAgBO,EAAhB,KAQFC,EAAAA,EAAAA,YAAU,KACRvB,EAAkBmB,GACdA,EAAgBK,OAAS,GAC3BX,GAAkB,EACnB,GACA,CAACM,EAAiBnB,KAErBuB,EAAAA,EAAAA,YAAU,KACRhB,EAAyBW,EAAcM,OAAS,GAC5CN,EAAcM,OAAS,GACzBX,GAAkB,EACnB,GACA,CAACK,EAAeX,IAwGnB,OAJIN,GAAYJ,GACdK,GAAY,IAIZ,QAAC,IAAD,CACEuB,KAAK,QACLC,UAAU,qBACVC,qBACsB,IAApBjB,EAASc,QACRlB,IAA0BE,GAC3BI,EAEFgB,uBAxGa,KAAK,OACd,SAAAlB,EAAS,SAAT,IAAamB,yBAAyBC,OAI5CjB,GAAkB,GAClBO,EACEV,EAAS,GAAGmB,cACZzB,EACAI,GACAuB,MAAKC,IACDA,IACFhB,IACApB,IACD,IARH,EAmGEE,OA/GS,KACXI,GAAY,GACZJ,IACAkB,GAAY,EA6GViB,kBAAmB3B,GAAwB4B,EAAAA,EAAAA,GAAE,cAAeA,EAAAA,EAAAA,GAAE,UAC9DC,kBAAmB7B,EAAwB,SAAW,UACtD8B,MAAM,QACNvC,KAAMA,EACNwC,OAAO,mBAAKH,EAAAA,EAAAA,GAAE,YAAazC,MAE3B,QAACL,EAAD,MACE,QAAC,KAAD,CACEqC,KAAK,YACLa,GAAG,YAEHC,OAAO,wBACP7B,SAAUA,EACV8B,SArGYC,IAClB9B,EAAY,CACV,IACK8B,EAAKC,KACRC,OAAQ,SAHZ,EAqGMC,SA7FYC,IAClBlC,EAAYD,EAASoC,QAAOJ,GAAQA,EAAKK,MAAQF,EAAYE,QACtD,GA6FDC,cAAe,OACfC,SAAUrC,IAEV,QAAC,IAAD,CAAQsC,QAAStC,IAAiBsB,EAAAA,EAAAA,GAAE,kBAGvCpB,IACC,QAAC,IAAD,CACEA,aAAcA,EACdqC,0BAA2BpD,EAAeyB,OAAS,IA7F3B,IAA1BzB,EAAeyB,OACV,MAIP,yBACE,mBAAKU,EAAAA,EAAAA,GAAE,wBACP,QAACvD,EAAD,KAAgBe,GACfK,EAAeqD,KAAIC,IAClB,QAACjE,EAAD,CAAsBkE,IAAK,gBAAgBD,MACzC,eAAK3B,UAAU,iBACZ2B,GACD,gBAAM3B,UAAU,YAAhB,OAEF,iBACED,KAAM,YAAY4B,IAClBE,aAAc,YAAYF,IAC1BG,KAAK,WACLC,MAAOrD,EAAUiD,GACjBb,SAAUkB,GACRrD,EAAa,IAAKD,EAAW,CAACiD,GAAWK,EAAMC,OAAOF,cAU7DnD,GAKH,yBACE,QAAClB,EAAD,MACE,eAAKsC,UAAU,qBAAqB/B,IACpC,eAAK+B,UAAU,kBACZQ,EAAAA,EAAAA,GAAE,wBAAwBA,EAAAA,EAAAA,GAAE,gBAE/B,iBAEEI,GAAG,YACHkB,KAAK,OACLhB,SAnDgBkB,IAA8C,QACtE,MAAME,EAAW,OAAI,EAAJ,SAAIF,EAAMG,oBAAV,EAAI,EAAqBJ,OAAzB,EAA6C,GAC9DhD,EAAsBmD,EAAYE,iBAAkB5B,EAAAA,EAAAA,GAAE,aAAtD,MAmCS,KA0BX,C,+aC9OF,MAgDA,EAhD8E,IAIzE,IAJyE,QAC5E6B,EAD4E,OAE5EjE,EAF4E,YAG5EkE,GACG,EACH,MAAOnE,EAAMoE,IAAW9D,EAAAA,EAAAA,WAAkB,IACnC+D,EAAaC,IAAkBhE,EAAAA,EAAAA,WAAkB,IACjDiE,EAAyBC,IAC9BlE,EAAAA,EAAAA,UAAiB,IAQbmE,EAAmB,KACvBN,EAAYI,EAAZ,EAQF,OALA7C,EAAAA,EAAAA,YAAU,KACR8C,EAA2B,IAC3BJ,EAAoB,OAAZF,EAAR,GACC,CAACA,KAGF,QAACQ,EAAA,EAAD,CACE1E,KAAMA,EACNC,OAAQA,EACRuC,OAAOH,EAAAA,EAAAA,GAAE,qBACTP,qBAAsBuC,EACtBtC,uBAAwB0C,EACxBrC,mBAAmBC,EAAAA,EAAAA,GAAE,eAErB,QAACsC,EAAA,GAAD,CAAWC,QAAQ,cAAavC,EAAAA,EAAAA,GAAE,sBAClC,QAACwC,EAAA,GAAD,CAEElB,KAAK,OACLlB,GAAG,YACHiB,aAAa,MACbE,MAAOW,EACP5B,SA/BYkB,IAA8C,MAC9D,MAAME,EAAW,SAAGF,EAAMC,OAAOF,OAAhB,EAAyB,GAC1CY,EAA2BT,GAC3BO,EAA+B,KAAhBP,EAAf,EA6BIe,aAAcL,IAjBpB,ECaIM,EAAmBhG,EAAAA,GAAAA,GAAU;;;;;oBAKd,IAAD,IAAC,MAAEC,GAAH,SAAeA,EAAMQ,QAArB;;EAIdwF,EAAUjG,EAAAA,GAAAA,GAAU;WACd,IAAD,IAAC,MAAEC,GAAH,SAAeA,EAAMC,OAAOC,UAAUC,IAAtC;;;;;;;kBAOQ,IAAD,IAAC,MAAEH,GAAH,SAAeA,EAAMC,OAAOC,UAAUO,MAAtC;;;;aAIJ,IAAD,IAAC,MAAET,GAAH,SAAeA,EAAMC,OAAOC,UAAUO,MAAtC;;eAEG,IAAD,IAAC,MAAET,GAAH,SAAeA,EAAMC,OAAOC,UAAUO,MAAtC;;;;eAIC,IAAD,IAAC,MAAET,GAAH,SAAeA,EAAMC,OAAOC,UAAUO,MAAtC;;;EA8tBf,GAAewF,EAAAA,EAAAA,KAzrB2C,IAIrD,IAJqD,eACxDC,EADwD,gBAExDC,EAFwD,KAGxDC,GACG,EACH,MAAMC,GAAUC,EAAAA,EAAAA,OAEdlE,OAAO,QACLiC,EACAkC,cAAeC,EACfC,mBAAoBC,EAHf,kBAILC,GALE,QAOJC,EAPI,UAQJC,EARI,iBASJC,EATI,YAUJC,IACEC,EAAAA,EAAAA,IAA6B,WAAW3D,EAAAA,EAAAA,GAAE,WAAY6C,IAEnDe,EAA0BC,IAA+B5F,EAAAA,EAAAA,UAE9D,OAEK6F,EAAyBC,IAC9B9F,EAAAA,EAAAA,UAAyB,OAEpB+F,EAA6BC,IAClChG,EAAAA,EAAAA,UAAgC,OAE3BiG,EAAkBC,IAAmBlG,EAAAA,EAAAA,WAAkB,IACvDJ,EAAgBC,IAAqBG,EAAAA,EAAAA,UAAmB,KACxDmG,GAAiBC,KAAsBpG,EAAAA,EAAAA,WAAkB,GAgB1DqG,GAAUf,EAAQ,aAClBgB,GAAYhB,EAAQ,aACpBiB,GAAYjB,EAAQ,aACpBkB,GAAelB,EAAQ,iBACvBmB,GACJnB,EAAQ,gBAAiBoB,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,kBAEtCC,GAAcC,EAAAA,GAEdC,IAAuBC,EAAAA,EAAAA,cAC1B,IAAmB,IAAnB,GAAE5E,GAAiB,EAClB6E,EAAAA,EAAAA,IAAmB,CACjBC,SAAU,mBAAmB9E,MAE5BP,MAAM,IAAiB,IAAjB,KAAEsF,EAAO,CAAC,GAAO,EACtB,MAAMC,EAAyBD,EAAKrF,OAAOuF,QAAQnE,KAChDoE,IACC,MACEC,eAAe,QAAEC,EAAU,GAAZ,aAAgBC,EAAe,IAAO,CAAC,GACpDC,KAAKC,MAAML,EAAOM,OAAS,OAAS,CAAC,EACzC,MAAO,IACFN,EACHO,sBAAuBL,GAAW,GAClCC,aAAcA,GAAgB,GAC9BK,aAAcN,GAAWC,EAJ3B,IASJN,EAAKrF,OAAOuF,QAAU,IAAID,GAC1BrB,EAA2BoB,EAAKrF,OAAhC,IAEDiG,OAAM,KACLlD,GACE7C,EAAAA,EAAAA,GAAE,yDADJ,GAtBJ,GA2BF,CAAC6C,IA2BGmD,GAA2BC,IAC/B,MAAMC,EAAMD,EAAiB/E,KAAK,IAAD,IAAC,GAAEd,GAAH,SAAYA,CAAZ,KACjC+F,EAAAA,EAAAA,GAAqB,UAAWD,GAAK,KACnC7B,IAAmB,EAAnB,IAEFA,IAAmB,EAAnB,EAGIgB,IAAUe,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEC,KAAO,IAIG,IAHRC,KACEC,UAAU,KAAEC,KAEN,EACR,MAAa,aAATA,GAEA,QAACC,EAAA,EAAD,CACErG,GAAG,2BACHD,OAAOH,EAAAA,EAAAA,GAAE,sBAET,QAAC0G,EAAA,kBAAD,QAMJ,QAACD,EAAA,EAAD,CAASrG,GAAG,0BAA0BD,OAAOH,EAAAA,EAAAA,GAAE,qBAC7C,QAAC0G,EAAA,iBAAD,MAFJ,EAMFC,SAAU,YACVC,eAAe,EACfC,KAAM,KACNzG,GAAI,MAEN,CACEiG,KAAO,IASG,IARRC,KACEC,UAAU,MACRX,EACAkB,WAAYC,EAFJ,YAGRC,EACAC,YAAaC,KAGT,EACR,MAAMC,GAGJ,QAACC,EAAA,EAAD,CAAaC,GAAIH,GAAaH,GAEhC,IACE,MAAMO,EAAc5B,KAAKC,MAAMC,GAC/B,OACE,QAAClD,EAAD,MACc,MAAX4E,OAAA,EAAAA,EAAa/B,iBACZ,QAACgC,EAAA,EAAD,CACEC,YAAaF,EAAY/B,cAAcE,aACvCD,QAAS8B,EAAY/B,cAAcC,QACnCqB,KAAK,OAGG,MAAXS,OAAA,EAAAA,EAAaG,oBACZ,QAACC,EAAA,EAAD,CACEC,gBAAiBL,EAAYG,iBAC7BZ,KAAK,MAGRM,EACAH,IACC,QAACY,EAAA,EAAD,CAAaC,QAASb,EAAac,QAAQ,eAMlD,CAFC,MACA,OAAOX,CACR,GAEHY,QAAQ/H,EAAAA,EAAAA,GAAE,QACV2G,SAAU,cAEZ,CACEN,KAAO,IAAD,IACJC,KACEC,UAAU,KAAEC,KAFV,QAIe,aAATA,GAAsBxG,EAAAA,EAAAA,GAAE,aAAcA,EAAAA,EAAAA,GAAE,UAJ9C,EAKN+H,QAAQ/H,EAAAA,EAAAA,GAAE,QACV2G,SAAU,OACVC,eAAe,EACfC,KAAM,MAER,CACEkB,QAAQ/H,EAAAA,EAAAA,GAAE,YACV2G,SAAU,yBACVE,KAAM,MAER,CACEkB,QAAQ/H,EAAAA,EAAAA,GAAE,UACV2G,SAAU,SACVE,KAAM,MAER,CACER,KAAO,IAAD,IACJC,KACEC,UAAYyB,2BAA4BC,KAFtC,SAIK,gBAAMzI,UAAU,WAAWyI,EAJhC,EAKNF,QAAQ/H,EAAAA,EAAAA,GAAE,YACV2G,SAAU,6BACVE,KAAM,MAER,CACER,KAAO,IAAD,IACJC,KACEC,UAAY2B,gBAAiBC,KAF3B,SAIKA,CAJL,EAKNJ,QAAQ/H,EAAAA,EAAAA,GAAE,eACV2G,SAAU,wBACVE,KAAM,MAER,CACEF,SAAU,WACVC,eAAe,EACfwB,QAAQ,GAEV,CACE/B,KAAO,IAAD,IACJC,KACEC,UAAU,OAAE8B,EAAS,MAFnB,SAIK,QAACC,EAAA,EAAD,CAAUC,MAAOF,GAJtB,EAKNN,QAAQ/H,EAAAA,EAAAA,GAAE,UACVI,GAAI,SACJwG,eAAe,EACfC,KAAM,MAER,CACEF,SAAU,MACVyB,QAAQ,EACRxB,eAAe,GAEjB,CACEP,KAAO,IAA8B,UAA5BC,KAAK,SAAEC,IAAqB,EAEnC,MAAMiC,EACJ,MAAAjC,EAAS8B,OAAOnH,KAAKuH,GAAaA,EAAErI,MAApC,OAAiD2C,EAAK2F,UACtDC,EAAAA,EAAAA,IAAY5F,GAMd,OAAKuB,IAAYC,IAAcG,IAAcD,IAI3C,QAAC9B,EAAD,CAASnD,UAAU,WAChB+E,KACC,QAACkC,EAAA,EAAD,CACErG,GAAG,wBACHD,OAAOH,EAAAA,EAAAA,GAAE,UACT4I,UAAU,WAEV,gBACEC,KAAK,SACLC,SAAU,EACVtJ,UAAU,gBACVuJ,QAlBW,KAAMC,OAlLHnH,EAkL0B0E,EAjLxDtB,EAAAA,EAAAA,IAAmB,CACjBC,SAAU,mBAAmBrD,EAAQzB,uBAEpCP,MAAM,IAAiB,IAAjB,KAAEsF,EAAO,CAAC,GAAO,EACtBtB,EAA4B,IACvBhC,EACHoH,YAAa9D,EAAK+D,OAAOC,MACzBC,gBAAiBjE,EAAKkE,WAAWF,OAHnC,IAMDpD,OACCuD,EAAAA,EAAAA,KAAmBC,IACjBvJ,EAAAA,EAAAA,GACE,4DACAuJ,MAfqB,IAAC1H,CAkLxB,IAoBU,QAAC6E,EAAA,QAAD,QAILhC,KACC,QAAC+B,EAAA,EAAD,CACErG,GAAG,wBACHD,OAAOH,EAAAA,EAAAA,GAAE,UACT4I,UAAU,WAEV,gBACEC,KAAK,SACLC,SAAU,EACVtJ,UAAU,gBACVuJ,QAjCW,IAAM/C,GAAwB,CAACO,MAmC1C,QAACG,EAAA,QAAD,QAILpC,KACC,QAACmC,EAAA,EAAD,CACErG,GAAG,sBACHD,MACEqI,GACIxI,EAAAA,EAAAA,GAAE,SACFA,EAAAA,EAAAA,GACE,8HAGR4I,UAAU,gBAEV,gBACEC,KAAK,SACLC,SAAU,EACVtJ,UAAWgJ,EAAY,gBAAkB,WACzCO,QAASP,EAzDA,IAAMzD,GAAqBwB,QAyDFiD,IAElC,QAAC9C,EAAA,UAAD,QAILjC,IAAkC,YAAlB8B,EAASC,OACxB,QAACC,EAAA,EAAD,CACErG,GAAG,2BACHD,OAAOH,EAAAA,EAAAA,GAAE,aACT4I,UAAU,WAEV,gBACEC,KAAK,SACLC,SAAU,EACVtJ,UAAU,gBACVuJ,QAtEc,KA/J9B9E,EA+J8DsC,EAAxD,IAwEU,QAACG,EAAA,OAAD,SAtED,IAET,EA2EFqB,QAAQ/H,EAAAA,EAAAA,GAAE,WACVI,GAAI,UACJgI,QAAS9D,KAAYC,KAAcE,GACnCmC,eAAe,KAGnB,CAACtC,GAASC,GAAWG,GAAWK,GAAsBN,GAAc1B,IAGhE0G,IAAuBrD,EAAAA,EAAAA,UAC3B,IAAM,CACJ,CACE2B,QAAQ/H,EAAAA,EAAAA,GAAE,SACVoB,IAAK,QACLhB,GAAI,SACJsJ,MAAO,SACPC,SAAUC,EAAAA,EAAAA,iBACVC,gBAAiB,MACjBC,cAAcC,EAAAA,EAAAA,IACZ,UACA,UACAT,EAAAA,EAAAA,KAAmBC,IACjBvJ,EAAAA,EAAAA,GACE,4DACAuJ,KAGJxG,GAEFiH,UAAU,GAEZ,CACEjC,QAAQ/H,EAAAA,EAAAA,GAAE,YACVoB,IAAK,WACLhB,GAAI,WACJsJ,MAAO,SACPC,SAAUC,EAAAA,EAAAA,gBACVC,gBAAiB,MACjBC,cAAcC,EAAAA,EAAAA,IACZ,UACA,YACAT,EAAAA,EAAAA,KAAmBC,IACjBvJ,EAAAA,EAAAA,GAAE,gDAAiDuJ,MAGvDS,UAAU,GAEZ,CACEjC,QAAQ/H,EAAAA,EAAAA,GAAE,UACVoB,IAAK,SACLhB,GAAI,SACJsJ,MAAO,SACPC,SAAUC,EAAAA,EAAAA,OACVC,gBAAiB,MACjBC,cAAcG,EAAAA,EAAAA,IACZ,UACA,UACAX,EAAAA,EAAAA,KAAmBC,IACjBvJ,EAAAA,EAAAA,GAAE,qDAAsDuJ,MAG5DS,UAAU,GAEZ,CACEjC,QAAQ/H,EAAAA,EAAAA,GAAE,QACVoB,IAAK,MACLhB,GAAI,MACJsJ,MAAO,SACPC,SAAUC,EAAAA,EAAAA,qBACVC,gBAAiB,MACjBK,QAAS,CACP,CAAEC,OAAOnK,EAAAA,EAAAA,GAAE,WAAYuB,OAAO,GAC9B,CAAE4I,OAAOnK,EAAAA,EAAAA,GAAE,YAAauB,OAAO,KAGnC,CACEwG,QAAQ/H,EAAAA,EAAAA,GAAE,aACVoB,IAAK,YACLhB,GAAI,KACJgK,WAAY,YACZV,MAAO,SACPC,SAAUC,EAAAA,EAAAA,mBACVC,iBAAiB7J,EAAAA,EAAAA,GAAE,OACnBkK,QAAS,CACP,CAAEC,OAAOnK,EAAAA,EAAAA,GAAE,OAAQuB,OAAO,GAC1B,CAAE4I,OAAOnK,EAAAA,EAAAA,GAAE,MAAOuB,OAAO,KAG7B,CACEwG,QAAQ/H,EAAAA,EAAAA,GAAE,UACVoB,IAAK,SACLhB,GAAI,aACJsJ,MAAO,SACPC,SAAUC,EAAAA,EAAAA,YAGd,CAAC7G,IAGGsH,GAAyB,CAC7BC,YAAa,WACb/K,MAAMS,EAAAA,EAAAA,GAAE,aAGJuK,GAAgC,GAiHtC,OA/GIhG,IAAaG,KACf6F,GAAUC,KAAK,CACbjL,MAAMS,EAAAA,EAAAA,GAAE,eACR+I,QAAStF,EACTgH,YAAa,cAIbjG,KACF+F,GAAUC,KAAK,CACbjL,MACE,yBACE,aAAGC,UAAU,eADf,KACgCQ,EAAAA,EAAAA,GAAE,WAAY,KAGhD+I,QAAS,KACP/F,EAAQwH,KAAK,gBAAb,EAEFC,YAAa,aAGX9F,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,mBACnB2F,GAAUC,KAAK,CACbjL,MACE,QAACkH,EAAA,EAAD,CACErG,GAAG,iBACHD,OAAOH,EAAAA,EAAAA,GAAE,mBACT4I,UAAU,gBAEV,QAAClC,EAAA,SAAD,OAGJ+D,YAAa,OACb1B,QArcyB,KAC7B5E,GAAgB,EAAhB,KAycFkG,GAASK,QAAUH,IA0EjB,yBACE,QAACI,EAAA,EAAYN,IACZzG,IACC,QAACgH,EAAA,EAAD,CACE5D,aAAahH,EAAAA,EAAAA,GACX,wJACA4D,EAAyBkD,WACzBlD,EAAyBqF,YACzBrF,EAAyBwF,iBAE3ByB,UAAW,KACLjH,GAvEc,CAAC,IAA0C,IAA1C,GAAExD,EAAI0G,WAAYgE,GAAwB,EACrE7F,EAAAA,EAAAA,OAAsB,CACpBC,SAAU,mBAAmB9E,MAC5BP,MACD,KACE6D,IACAG,EAA4B,MAC5Bf,GAAgB9C,EAAAA,EAAAA,GAAE,cAAe8K,GAAjC,IAEFxB,EAAAA,EAAAA,KAAmBC,GACjB1G,GACE7C,EAAAA,EAAAA,GAAE,qCAAsC8K,EAAWvB,MAVzD,EAuEUwB,CAAoBnH,EACrB,EAEHhG,OAvFwB,KAC9BiG,EAA4B,KAA5B,EAuFMmH,MAAI,EACJ7K,OAAOH,EAAAA,EAAAA,GAAE,qBAGZ8D,IACC,QAACmH,EAAA,EAAD,CACEC,WAAYpH,EACZqH,iBAAkBzH,EAClB9F,OA5FsB,KAC5BmG,EAA2B,KAA3B,EA4FMpG,MAAI,KAGR,QAAC,EAAD,CACEkE,QAASmC,EACTpG,OA9F6B,KACjCqG,EAA+B,KAA/B,EA8FInC,YAxD0BsJ,IACM,OAAhCpH,GACFnB,GAAe7C,EAAAA,EAAAA,GAAE,gDAGnBiF,EAAAA,EAAAA,KAAoB,CAClBC,SAAU,4BACVmG,YAAa,CACXC,cAAa,MAAEtH,OAAF,EAAEA,EAA6B5D,GAC5C0G,WAAYsE,KAEbvL,MACD,KACEoE,EAA+B,MAC/BP,GAAa,IAEf4F,EAAAA,EAAAA,KAAmBC,GACjB1G,GACE7C,EAAAA,EAAAA,GAAE,2DAA4DuJ,MAbpE,KAqDE,QAACgC,EAAA,EAAD,CACEpL,OAAOH,EAAAA,EAAAA,GAAE,kBACTgH,aAAahH,EAAAA,EAAAA,GACX,0DAEF6K,UAjF2BW,IAC/BvG,EAAAA,EAAAA,OAAsB,CACpBC,SAAU,sBAAsBuG,IAAAA,OAC9BD,EAAiBtK,KAAK,IAAD,IAAC,GAAEd,GAAH,SAAYA,CAAZ,SAEtBP,MACA,IAAiB,IAAjB,KAAEsF,EAAO,CAAC,GAAO,EAChBzB,IACAZ,EAAgBqC,EAAKuG,QAArB,IAEFpC,EAAAA,EAAAA,KAAmBC,GACjB1G,GACE7C,EAAAA,EAAAA,GAAE,wDAAyDuJ,MAXjE,IAkFKoC,IACC,MAAMC,EAA4C,GAiBlD,OAhBIrH,IACFqH,EAAYpB,KAAK,CACfpJ,IAAK,SACL7B,MAAMS,EAAAA,EAAAA,GAAE,UACR6L,SAAUF,EACVrK,KAAM,WAGNoD,IACFkH,EAAYpB,KAAK,CACfpJ,IAAK,SACL7B,MAAMS,EAAAA,EAAAA,GAAE,UACRsB,KAAM,UACNuK,SAAU7F,MAIZ,QAAC8F,EAAA,EAAD,CACEtM,UAAU,oBACV6F,QAASA,GACT0G,KAAM1I,EACN8F,MAAOhG,EACP6I,SAAUC,EAAAA,GACVzI,UAAWA,EACX0I,QAASzC,GACTzI,QAASA,EACT6D,YAAaA,GACb+G,YAAaA,EACbtI,kBAAmBA,EACnB6I,kBAAmB1I,EACnB2I,qBAAsBC,IACpB,MAAM,aAAEC,EAAF,cAAgBC,GAAkBF,EAASG,QAC/C,CAACC,EAAKC,KACoB,aAApBA,EAAEnG,SAASC,KAAqBiG,EAAIF,eAAiB,EAC5B,YAApBG,EAAEnG,SAASC,OAClBiG,EAAIH,cAAgB,GAEfG,IAET,CAAEH,aAAc,EAAGC,cAAe,IAGpC,OAAKF,EAAS/M,OAGVgN,IAAiBC,GACZvM,EAAAA,EAAAA,GACL,wBACAqM,EAAS/M,OACTgN,GAGAC,IAAkBD,GACbtM,EAAAA,EAAAA,GACL,yBACAqM,EAAS/M,OACTiN,IAIGvM,EAAAA,EAAAA,GACL,wCACAqM,EAAS/M,OACTiN,EACAD,IArBOtM,EAAAA,EAAAA,GAAE,aAiBX,GA5CN,KAwDJ,QAAC,IAAD,CACE1C,aAAa,UACbC,eAAeyC,EAAAA,EAAAA,GAAE,WACjBxC,uBAAwBmP,EAAAA,GACxBlP,wBAAyBmP,EAAAA,GACzB/J,eAAgBA,EAChBC,gBAAiBA,EACjBpF,cAroBsB,KAC1ByG,GAAgB,GAChBT,IACAZ,GAAgB9C,EAAAA,EAAAA,GAAE,oBAAlB,EAmoBIrC,KAAMuG,EACNtG,OA3oB0B,KAC9BuG,GAAgB,EAAhB,EA2oBItG,eAAgBA,EAChBC,kBAAmBA,IAEpBsG,KAAmB,QAACyI,EAAA,EAAD,MAhIxB,G","sources":["webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/views/CRUD/data/dataset/DuplicateDatasetModal.tsx","webpack://superset/./src/views/CRUD/data/dataset/DatasetList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { FormLabel } from 'src/components/Form';\nimport { Input } from 'src/components/Input';\nimport Modal from 'src/components/Modal';\nimport Dataset from 'src/types/Dataset';\n\ninterface DuplicateDatasetModalProps {\n  dataset: Dataset | null;\n  onHide: () => void;\n  onDuplicate: (newDatasetName: string) => void;\n}\n\nconst DuplicateDatasetModal: FunctionComponent<DuplicateDatasetModalProps> = ({\n  dataset,\n  onHide,\n  onDuplicate,\n}) => {\n  const [show, setShow] = useState<boolean>(false);\n  const [disableSave, setDisableSave] = useState<boolean>(false);\n  const [newDuplicateDatasetName, setNewDuplicateDatasetName] =\n    useState<string>('');\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = event.target.value ?? '';\n    setNewDuplicateDatasetName(targetValue);\n    setDisableSave(targetValue === '');\n  };\n\n  const duplicateDataset = () => {\n    onDuplicate(newDuplicateDatasetName);\n  };\n\n  useEffect(() => {\n    setNewDuplicateDatasetName('');\n    setShow(dataset !== null);\n  }, [dataset]);\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      title={t('Duplicate dataset')}\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={duplicateDataset}\n      primaryButtonName={t('Duplicate')}\n    >\n      <FormLabel htmlFor=\"duplicate\">{t('New dataset name')}</FormLabel>\n      <Input\n        data-test=\"duplicate-modal-input\"\n        type=\"text\"\n        id=\"duplicate\"\n        autoComplete=\"off\"\n        value={newDuplicateDatasetName}\n        onChange={onChange}\n        onPressEnter={duplicateDataset}\n      />\n    </Modal>\n  );\n};\n\nexport default DuplicateDatasetModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { ColumnObject } from 'src/views/CRUD/data/dataset/types';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, {\n  SubMenuProps,\n  ButtonProps,\n} from 'src/views/components/SubMenu';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\n\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from './constants';\nimport DuplicateDatasetModal from './DuplicateDatasetModal';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface VirtualDataset extends Dataset {\n  extra: Record<string, any>;\n  sql: string;\n}\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const history = useHistory();\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] =\n    useState<Dataset | null>(null);\n\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] =\n    useState<VirtualDataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = SORT_BY;\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const addCertificationFields = json.result.columns.map(\n            (column: ColumnObject) => {\n              const {\n                certification: { details = '', certified_by = '' } = {},\n              } = JSON.parse(column.extra || '{}') || {};\n              return {\n                ...column,\n                certification_details: details || '',\n                certified_by: certified_by || '',\n                is_certified: details || certified_by,\n              };\n            },\n          );\n          // eslint-disable-next-line no-param-reassign\n          json.result.columns = [...addCertificationFields];\n          setDatasetCurrentlyEditing(json.result);\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const openDatasetDuplicateModal = (dataset: VirtualDataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n        id: 'id',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              description,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          const titleLink = (\n            // exploreUrl can be a link to Explore or an external link\n            // in the first case use SPA routing, else use HTML anchor\n            <GenericLink to={exploreURL}>{datasetTitle}</GenericLink>\n          );\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedBadge\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                    size=\"l\"\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                    size=\"l\"\n                  />\n                )}\n                {titleLink}\n                {description && (\n                  <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n                )}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => (kind === 'physical' ? t('Physical') : t('Virtual')),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => changedByName,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          // Verify owner or isAdmin\n          const allowEdit =\n            original.owners.map((o: Owner) => o.id).includes(user.userId) ||\n            isUserAdmin(user);\n\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          const handleDuplicate = () => openDatasetDuplicateModal(original);\n          if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={\n                    allowEdit\n                      ? t('Edit')\n                      : t(\n                          'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                        )\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className={allowEdit ? 'action-button' : 'disabled'}\n                    onClick={allowEdit ? handleEdit : undefined}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n              {canDuplicate && original.kind === 'virtual' && (\n                <Tooltip\n                  id=\"duplicate-action-tooltop\"\n                  title={t('Duplicate')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDuplicate}\n                  >\n                    <Icons.Copy />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canDuplicate,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        key: 'schema',\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Type'),\n        key: 'sql',\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.datasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: t('Virtual'), value: false },\n          { label: t('Physical'), value: true },\n        ],\n      },\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.datasetIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [user],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    name: t('Datasets'),\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary',\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import datasets')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal,\n      });\n    }\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleDatasetDuplicate = (newDatasetName: string) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating?.id,\n        table_name: newDatasetName,\n      },\n    }).then(\n      () => {\n        setDatasetCurrentlyDuplicating(null);\n        refreshData();\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue duplicating the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n            datasetCurrentlyDeleting.table_name,\n            datasetCurrentlyDeleting.chart_count,\n            datasetCurrentlyDeleting.dashboard_count,\n          )}\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <DuplicateDatasetModal\n        dataset={datasetCurrentlyDuplicating}\n        onHide={closeDatasetDuplicateModal}\n        onDuplicate={handleDatasetDuplicate}\n      />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"],"names":["HelperMessage","styled","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","useImportResource","msg","useEffect","length","name","className","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","then","result","primaryButtonName","t","primaryButtonType","width","title","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","loading","showDbInstallInstructions","map","fileName","key","autoComplete","type","value","event","target","targetValue","currentTarget","toUpperCase","dataset","onDuplicate","setShow","disableSave","setDisableSave","newDuplicateDatasetName","setNewDuplicateDatasetName","duplicateDataset","Modal","Form","htmlFor","Input","onPressEnter","FlexRowContainer","Actions","withToasts","addDangerToast","addSuccessToast","user","history","useHistory","resourceCount","datasetCount","resourceCollection","datasets","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","datasetCurrentlyDeleting","setDatasetCurrentlyDeleting","datasetCurrentlyEditing","setDatasetCurrentlyEditing","datasetCurrentlyDuplicating","setDatasetCurrentlyDuplicating","importingDataset","showImportModal","preparingExport","setPreparingExport","canEdit","canDelete","canCreate","canDuplicate","canExport","isFeatureEnabled","FeatureFlag","initialSort","SORT_BY","openDatasetEditModal","useCallback","SupersetClient","endpoint","json","addCertificationFields","columns","column","certification","details","certified_by","JSON","parse","extra","certification_details","is_certified","catch","handleBulkDatasetExport","datasetsToExport","ids","handleResourceExport","useMemo","Cell","row","original","kind","Tooltip","Icons","accessor","disableSortBy","size","table_name","datasetTitle","description","explore_url","exploreURL","titleLink","GenericLink","to","parsedExtra","CertifiedBadge","certifiedBy","warning_markdown","WarningIconWithTooltip","warningMarkdown","InfoTooltip","tooltip","viewBox","Header","changed_on_delta_humanized","changedOn","changed_by_name","changedByName","hidden","owners","FacePile","users","allowEdit","o","userId","isUserAdmin","placement","role","tabIndex","onClick","openDatasetDeleteModal","chart_count","charts","count","dashboard_count","dashboards","createErrorHandler","errMsg","undefined","filterTypes","input","operator","FilterOperator","unfilteredLabel","fetchSelects","createFetchRelated","paginate","createFetchDistinct","selects","label","urlDisplay","menuData","activeChild","buttonArr","push","buttonStyle","buttons","SubMenu","DeleteModal","onConfirm","tableName","handleDatasetDelete","open","Datasource","datasource","onDatasourceSave","newDatasetName","jsonPayload","base_model_id","ConfirmStatusChange","datasetsToDelete","rison","message","confirmDelete","bulkActions","onSelect","ListView","data","pageSize","PAGE_SIZE","filters","disableBulkSelect","renderBulkSelectCopy","selected","virtualCount","physicalCount","reduce","acc","e","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Loading"],"sourceRoot":""}