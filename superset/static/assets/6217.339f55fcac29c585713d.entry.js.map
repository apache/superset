{"version":3,"file":"6217.339f55fcac29c585713d.entry.js","mappings":"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","sources":["webpack://superset/./src/components/Badge/index.tsx","webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx","webpack://superset/./src/hooks/apiResources/charts.ts","webpack://superset/./src/hooks/apiResources/dashboards.ts","webpack://superset/./src/hooks/apiResources/schemas.ts","webpack://superset/./src/hooks/apiResources/tables.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Badge as AntdBadge } from 'antd';\nimport { BadgeProps as AntdBadgeProps } from 'antd/lib/badge';\n\nexport interface BadgeProps extends AntdBadgeProps {\n  textColor?: string;\n}\n\nconst Badge = styled(\n  (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { textColor, color, text, ...props }: BadgeProps,\n  ) => <AntdBadge text={text} color={text ? color : undefined} {...props} />,\n)`\n  & > sup {\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px;\n    background: ${({ theme, color }) => color || theme.colors.primary.base};\n    color: ${({ theme, textColor }) =>\n      textColor || theme.colors.grayscale.light5};\n  }\n`;\n\nexport default Badge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useSchemas, SchemaOption } from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: (schemas: Array<object>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  onSchemasLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const { addSuccessToast } = useToasts();\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_columns: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n          const options = result.map((row: DatabaseObject) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n          }));\n\n          return {\n            data: options,\n            totalCount: options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    data,\n    isFetching: loadingSchemas,\n    isFetched,\n    refetch,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    onSuccess: data => {\n      onSchemasLoad?.(data);\n\n      if (data.length === 1) {\n        changeSchema(data[0]);\n      } else if (!data.find(schemaOption => schema === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')),\n  });\n\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type database name')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type database name')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type schema name')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type schema name')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { SchemaOption } from 'src/SqlLab/types';\nimport { useTables, Table } from 'src/hooks/apiResources';\nimport {\n  getClientErrorMessage,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: (schemaOptions: SchemaOption[]) => void;\n  onTablesLoad?: (options: Array<any>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  onTablesLoad,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    data,\n    isFetching: loadingTables,\n    isFetched,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    schema: currentSchema,\n    onSuccess: () => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: (err: Response) => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  useEffect(() => {\n    // Set the tableOptions in the queryEditor so autocomplete\n    // works on new tabs\n    if (data && isFetched) {\n      onTablesLoad?.(data.options);\n    }\n  }, [data, isFetched, onTablesLoad]);\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n          }))\n        : [],\n    [data],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { text } = option;\n      return text.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type table name')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type table name')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        onSchemasLoad={onSchemasLoad}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<TableSelectorProps> =\n  props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport rison from 'rison';\nimport Chart from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nfunction extractOwnerNames({ owners }: Chart) {\n  if (!owners) return null;\n  return owners.map(owner => `${owner.first_name} ${owner.last_name}`);\n}\n\nconst ownerNamesQuery = rison.encode({\n  columns: ['owners.first_name', 'owners.last_name'],\n  keys: ['none'],\n});\n\nexport function useChartOwnerNames(chartId: string) {\n  return useTransformedResource(\n    useApiV1Resource<Chart>(`/api/v1/chart/${chartId}?q=${ownerNamesQuery}`),\n    extractOwnerNames,\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Dashboard, Datasource, EmbeddedDashboard } from 'src/dashboard/types';\nimport { Chart } from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nexport const useDashboard = (idOrSlug: string | number) =>\n  useTransformedResource(\n    useApiV1Resource<Dashboard>(`/api/v1/dashboard/${idOrSlug}`),\n    dashboard => ({\n      ...dashboard,\n      // TODO: load these at the API level\n      metadata:\n        (dashboard.json_metadata && JSON.parse(dashboard.json_metadata)) || {},\n      position_data:\n        dashboard.position_json && JSON.parse(dashboard.position_json),\n    }),\n  );\n\n// gets the chart definitions for a dashboard\nexport const useDashboardCharts = (idOrSlug: string | number) =>\n  useApiV1Resource<Chart[]>(`/api/v1/dashboard/${idOrSlug}/charts`);\n\n// gets the datasets for a dashboard\n// important: this endpoint only returns the fields in the dataset\n// that are necessary for rendering the given dashboard\nexport const useDashboardDatasets = (idOrSlug: string | number) =>\n  useApiV1Resource<Datasource[]>(`/api/v1/dashboard/${idOrSlug}/datasets`);\n\nexport const useEmbeddedDashboard = (idOrSlug: string | number) =>\n  useApiV1Resource<EmbeddedDashboard>(`/api/v1/dashboard/${idOrSlug}/embedded`);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef } from 'react';\nimport { useQuery, UseQueryOptions } from 'react-query';\nimport rison from 'rison';\nimport { SupersetClient } from '@superset-ui/core';\n\nexport type FetchSchemasQueryParams = {\n  dbId?: string | number;\n  forceRefresh?: boolean;\n};\n\ntype QueryData = {\n  json: { result: string[] };\n  response: Response;\n};\n\nexport type SchemaOption = {\n  value: string;\n  label: string;\n  title: string;\n};\n\nexport function fetchSchemas({ dbId, forceRefresh }: FetchSchemasQueryParams) {\n  const queryParams = rison.encode({ force: forceRefresh });\n  // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n  const endpoint = `/api/v1/database/${dbId}/schemas/?q=${queryParams}`;\n  return SupersetClient.get({ endpoint }) as Promise<QueryData>;\n}\n\ntype Params = FetchSchemasQueryParams &\n  Pick<UseQueryOptions<SchemaOption[]>, 'onSuccess' | 'onError'>;\n\nexport function useSchemas(options: Params) {\n  const { dbId, onSuccess, onError } = options || {};\n  const forceRefreshRef = useRef(false);\n  const params = { dbId };\n  const result = useQuery<QueryData, Error, SchemaOption[]>(\n    ['schemas', { dbId }],\n    () => fetchSchemas({ ...params, forceRefresh: forceRefreshRef.current }),\n    {\n      select: ({ json }) =>\n        json.result.map((value: string) => ({\n          value,\n          label: value,\n          title: value,\n        })),\n      enabled: Boolean(dbId),\n      onSuccess,\n      onError,\n      onSettled: () => {\n        forceRefreshRef.current = false;\n      },\n    },\n  );\n\n  return {\n    ...result,\n    refetch: () => {\n      forceRefreshRef.current = true;\n      return result.refetch();\n    },\n  };\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useMemo } from 'react';\nimport { useQuery, UseQueryOptions } from 'react-query';\nimport rison from 'rison';\nimport { SupersetClient } from '@superset-ui/core';\n\nimport { useSchemas } from './schemas';\n\nexport type FetchTablesQueryParams = {\n  dbId?: string | number;\n  schema?: string;\n  forceRefresh?: boolean;\n};\nexport interface Table {\n  label: string;\n  value: string;\n  type: string;\n  extra?: {\n    certification?: {\n      certified_by: string;\n      details: string;\n    };\n    warning_markdown?: string;\n  };\n}\n\ntype QueryData = {\n  json: {\n    count: number;\n    result: Table[];\n  };\n  response: Response;\n};\n\nexport type Data = {\n  options: Table[];\n  hasMore: boolean;\n};\n\nexport function fetchTables({\n  dbId,\n  schema,\n  forceRefresh,\n}: FetchTablesQueryParams) {\n  const encodedSchema = schema ? encodeURIComponent(schema) : '';\n  const params = rison.encode({\n    force: forceRefresh,\n    schema_name: encodedSchema,\n  });\n\n  // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n  const endpoint = `/api/v1/database/${\n    dbId ?? 'undefined'\n  }/tables/?q=${params}`;\n  return SupersetClient.get({ endpoint }) as Promise<QueryData>;\n}\n\ntype Params = FetchTablesQueryParams &\n  Pick<UseQueryOptions<Data>, 'onSuccess' | 'onError'>;\n\nexport function useTables(options: Params) {\n  const { data: schemaOptions, isFetching } = useSchemas({\n    dbId: options.dbId,\n  });\n  const schemaOptionsMap = useMemo(\n    () => new Set(schemaOptions?.map(({ value }) => value)),\n    [schemaOptions],\n  );\n  const { dbId, schema, onSuccess, onError } = options || {};\n  const forceRefreshRef = useRef(false);\n  const params = { dbId, schema };\n  const result = useQuery<QueryData, Error, Data>(\n    ['tables', { dbId, schema }],\n    () => fetchTables({ ...params, forceRefresh: forceRefreshRef.current }),\n    {\n      select: ({ json }) => ({\n        options: json.result,\n        hasMore: json.count > json.result.length,\n      }),\n      enabled: Boolean(\n        dbId && schema && !isFetching && schemaOptionsMap.has(schema),\n      ),\n      onSuccess,\n      onError,\n      onSettled: () => {\n        forceRefreshRef.current = false;\n      },\n    },\n  );\n\n  return {\n    ...result,\n    refetch: () => {\n      forceRefreshRef.current = true;\n      return result.refetch();\n    },\n  };\n}\n"],"names":["styled","textColor","color","text","props","undefined","theme","gridUnit","colors","primary","base","grayscale","light5","DatabaseSelectorWrapper","LabelStyle","SelectLabel","backend","databaseName","className","title","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","onSchemasLoad","readOnly","schema","sqlLabMode","currentDb","setCurrentDb","useState","currentSchema","setCurrentSchema","label","value","addSuccessToast","useToasts","loadDatabases","useMemo","async","search","page","pageSize","endpoint","rison","order_columns","order_direction","page_size","filters","col","opr","SupersetClient","then","json","result","length","options","map","row","database_name","id","data","totalCount","changeSchema","useEffect","current","isFetching","loadingSchemas","isFetched","refetch","useSchemas","dbId","onSuccess","find","schemaOption","onError","t","schemaOptions","renderSelectRow","select","refreshBtn","ariaLabel","optionFilterProps","header","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","onClick","tooltipContent","labelInValue","loading","name","item","showSearch","renderSchemaSelect","IconWithoutRef","forwardRef","ref","role","css","cursor","TableSelectorWrapper","secondary","light1","TableLabel","TableOption","table","type","extra","iconSize","certification","certifiedBy","certified_by","details","size","warning_markdown","warningMarkdown","TableSelector","onTablesLoad","tableSelectMode","tableValue","onTableSelectChange","tableSelectValue","setTableSelectValue","loadingTables","useTables","err","getClientErrorObject","clientError","getClientErrorMessage","tableOptions","option","filter","internalTableChange","selectedOptions","Array","isArray","handleFilterOption","searchValue","trim","toLowerCase","filterOption","mode","allowClear","renderTableSelect","TableSelectorMultiple","extractOwnerNames","owners","owner","first_name","last_name","ownerNamesQuery","columns","keys","useChartOwnerNames","chartId","useTransformedResource","useApiV1Resource","useDashboard","idOrSlug","dashboard","metadata","json_metadata","JSON","parse","position_data","position_json","useDashboardCharts","useDashboardDatasets","forceRefreshRef","useRef","params","useQuery","forceRefresh","force","fetchSchemas","enabled","Boolean","onSettled","schemaOptionsMap","Set","encodedSchema","encodeURIComponent","schema_name","fetchTables","hasMore","count","has"],"sourceRoot":""}