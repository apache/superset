{"version":3,"file":"cee22a81c389391538df.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/Tags/Tag.tsx","webpack://superset/./src/components/Tags/TagsList.tsx","webpack://superset/./src/views/CRUD/dashboard/types.ts","webpack://superset/./src/views/CRUD/dashboard/DashboardList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport AntdTag from 'antd/lib/tag';\nimport React, { useMemo } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledTag = styled(AntdTag)`\n  ${({ theme }) => `\n  margin-top: ${theme.gridUnit}px;\n  margin-bottom: ${theme.gridUnit}px;\n  font-size: ${theme.typography.sizes.s}px;\n  `};\n`;\n\nconst Tag = ({\n  name,\n  id,\n  index = undefined,\n  onDelete = undefined,\n  editable = false,\n  onClick = undefined,\n}: TagType) => {\n  const isLongTag = useMemo(() => name.length > 20, [name]);\n\n  const handleClose = () => (index ? onDelete?.(index) : null);\n\n  const tagElem = (\n    <>\n      {editable ? (\n        <StyledTag\n          key={id}\n          closable={editable}\n          onClose={handleClose}\n          color=\"blue\"\n        >\n          {isLongTag ? `${name.slice(0, 20)}...` : name}\n        </StyledTag>\n      ) : (\n        <StyledTag role=\"link\" key={id} onClick={onClick}>\n          {id ? (\n            <a\n              href={`/superset/tags/?tags=${name}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {isLongTag ? `${name.slice(0, 20)}...` : name}\n            </a>\n          ) : isLongTag ? (\n            `${name.slice(0, 20)}...`\n          ) : (\n            name\n          )}\n        </StyledTag>\n      )}\n    </>\n  );\n\n  return isLongTag ? (\n    <Tooltip title={name} key={name}>\n      {tagElem}\n    </Tooltip>\n  ) : (\n    tagElem\n  );\n};\n\nexport default Tag;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport Tag from './Tag';\n\nexport type TagsListProps = {\n  tags: TagType[];\n  editable?: boolean;\n  /**\n   * OnDelete:\n   * Only applies when editable is true\n   * Callback for when a tag is deleted\n   */\n  onDelete?: ((index: number) => void) | undefined;\n  maxTags?: number | undefined;\n};\n\nconst TagsDiv = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst TagsList = ({\n  tags,\n  editable = false,\n  onDelete,\n  maxTags,\n}: TagsListProps) => {\n  const [tempMaxTags, setTempMaxTags] = useState<number | undefined>(maxTags);\n\n  const handleDelete = (index: number) => {\n    onDelete?.(index);\n  };\n\n  const expand = () => setTempMaxTags(undefined);\n\n  const collapse = () => setTempMaxTags(maxTags);\n\n  const tagsIsLong: boolean | null = useMemo(\n    () => (tempMaxTags ? tags.length > tempMaxTags : null),\n    [tags.length, tempMaxTags],\n  );\n\n  const extraTags: number | null = useMemo(\n    () =>\n      typeof tempMaxTags === 'number' ? tags.length - tempMaxTags + 1 : null,\n    [tagsIsLong, tags.length, tempMaxTags],\n  );\n\n  return (\n    <TagsDiv className=\"tag-list\">\n      {tagsIsLong && typeof tempMaxTags === 'number' ? (\n        <>\n          {tags.slice(0, tempMaxTags - 1).map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {tags.length > tempMaxTags ? (\n            <Tag name={`+${extraTags}...`} onClick={expand} />\n          ) : null}\n        </>\n      ) : (\n        <>\n          {tags.map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {maxTags ? (\n            tags.length > maxTags ? (\n              <Tag name=\"...\" onClick={collapse} />\n            ) : null\n          ) : null}\n        </>\n      )}\n    </TagsDiv>\n  );\n};\n\nexport default TagsList;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport type DashboardObject = {\n  dashboard_title: string;\n  description?: string;\n  css?: string;\n  slug?: string;\n  position?: string;\n  metadata?: string;\n};\n\nexport enum DashboardStatus {\n  PUBLISHED = 'published',\n  DRAFT = 'draft',\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport { Dashboard as CRUDDashboard } from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport DashboardCard from './DashboardCard';\nimport { DashboardStatus } from './types';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface Dashboard {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst bootstrapData = getBootstrapData();\n\nfunction DashboardList(props: DashboardListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const enableBroadUserAccess =\n    bootstrapData?.common?.conf?.ENABLE_BROAD_ACTIVITY_ACCESS;\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by_url,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by_url,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Title'),\n        accessor: 'dashboard_title',\n      },\n\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by_name: changedByName,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) =>\n          enableBroadUserAccess ? (\n            <a href={changedByUrl}>{changedByName}</a>\n          ) : (\n            <>{changedByName}</>\n          ),\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.titleOrSlug,\n      },\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        key: 'created_by',\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.dashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n    ] as Filters;\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM)) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.chartTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags,\n      });\n    }\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        userId={userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import dashboards')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"],"names":["HelperMessage","styled","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","useImportResource","msg","useEffect","length","name","className","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","then","result","primaryButtonName","t","primaryButtonType","width","title","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","loading","showDbInstallInstructions","map","fileName","key","autoComplete","type","value","event","target","targetValue","currentTarget","toUpperCase","StyledTag","AntdTag","index","onDelete","editable","onClick","isLongTag","useMemo","tagElem","closable","onClose","color","slice","role","href","rel","Tooltip","TagsDiv","tags","maxTags","tempMaxTags","setTempMaxTags","handleDelete","tagsIsLong","extraTags","tag","undefined","DashboardStatus","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","bootstrapData","getBootstrapData","withToasts","props","addDangerToast","addSuccessToast","user","userId","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","dashboardIds","d","saveFavoriteStatus","favoriteStatus","useFavoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","preparingExport","setPreparingExport","enableBroadUserAccess","common","conf","ENABLE_BROAD_ACTIVITY_ACCESS","userKey","dangerouslyGetItemDoNotUse","toString","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","SupersetClient","endpoint","json","changed_by_name","changed_by_url","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","createErrorHandler","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleResourceExport","columns","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","to","CertifiedBadge","details","accessor","changedByName","changedByUrl","PUBLISHED","changedOn","created_by","createdBy","first_name","last_name","FacePile","users","Tags","ConfirmStatusChange","description","onConfirm","handleDashboardDelete","confirmDelete","placement","tabIndex","Icons","favoritesFilter","urlDisplay","input","operator","FilterOperator","unfilteredLabel","selects","label","filters","filters_list","fetchSelects","createFetchRelated","paginate","push","loadTags","sortTypes","renderCard","useCallback","DashboardCard","showThumbnails","thumbnails","subMenuButtons","buttonStyle","window","location","assign","SubMenu","buttons","dashboardsToDelete","rison","message","bulkActions","onSelect","PropertiesModal","dashboardId","onSubmit","DeleteModal","open","ListView","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","Loading"],"sourceRoot":""}