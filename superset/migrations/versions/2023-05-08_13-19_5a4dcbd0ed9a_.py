# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""empty message

Revision ID: 5a4dcbd0ed9a
Revises: 9c2a5681ddfd
Create Date: 2023-05-08 13:19:54.900400

"""

# revision identifiers, used by Alembic.
revision = '5a4dcbd0ed9a'
down_revision = '9c2a5681ddfd'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('metrics')
    op.drop_table('alert_owner')
    op.drop_table('clusters')
    op.drop_index('ix_alerts_active', table_name='alerts')
    op.drop_table('alerts')
    op.drop_table('datasources')
    op.drop_index('ix_dashboard_email_schedules_active', table_name='dashboard_email_schedules')
    op.drop_table('dashboard_email_schedules')
    op.drop_table('druiddatasource_user')
    op.drop_table('columns')
    op.drop_table('alert_logs')
    op.drop_index('ix_slice_email_schedules_active', table_name='slice_email_schedules')
    op.drop_table('slice_email_schedules')
    op.drop_index('ix_sql_observations_dttm', table_name='sql_observations')
    op.drop_table('sql_observations')
    op.alter_column('annotation', 'layer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('dashboard_roles', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('dbs', 'allow_file_upload',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.create_unique_constraint(None, 'dynamic_plugin', ['bundle_url'])
    op.alter_column('embedded_dashboards', 'uuid',
               existing_type=postgresql.UUID(),
               nullable=False)
    op.create_foreign_key(None, 'embedded_dashboards', 'ab_user', ['created_by_fk'], ['id'])
    op.create_foreign_key(None, 'embedded_dashboards', 'ab_user', ['changed_by_fk'], ['id'])
    op.alter_column('filter_sets', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_unique_constraint(None, 'filter_sets', ['name'])
    op.drop_index('ix_key_value_expires_on', table_name='key_value')
    op.drop_index('ix_key_value_uuid', table_name='key_value')
    op.create_unique_constraint(None, 'key_value', ['uuid'])
    op.drop_index('ix_logs_user_id_dttm', table_name='logs')
    op.alter_column('report_schedule', 'extra_json',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_index('ix_creation_method', table_name='report_schedule')
    op.create_unique_constraint(None, 'report_schedule_user', ['user_id', 'report_schedule_id'])
    op.drop_index('ix_row_level_security_filters_filter_type', table_name='row_level_security_filters')
    op.alter_column('sl_columns', 'is_additive',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_aggregation',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_increase_desired',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_partition',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_physical',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_spatial',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('sl_columns', 'is_temporal',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_constraint('sl_table_columns_column_id_fkey', 'sl_table_columns', type_='foreignkey')
    op.drop_constraint('sl_table_columns_table_id_fkey', 'sl_table_columns', type_='foreignkey')
    op.create_foreign_key(None, 'sl_table_columns', 'sl_columns', ['column_id'], ['id'], ondelete='cascade')
    op.create_foreign_key(None, 'sl_table_columns', 'sl_tables', ['table_id'], ['id'], ondelete='cascade')
    op.create_unique_constraint(None, 'sl_tables', ['database_id', 'catalog', 'schema', 'name'])
    op.alter_column('ssh_tunnels', 'database_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_ssh_tunnels_database_id', table_name='ssh_tunnels')
    op.drop_index('ix_ssh_tunnels_uuid', table_name='ssh_tunnels')
    op.create_unique_constraint(None, 'ssh_tunnels', ['database_id'])
    op.create_unique_constraint(None, 'ssh_tunnels', ['uuid'])
    op.create_foreign_key(None, 'ssh_tunnels', 'ab_user', ['changed_by_fk'], ['id'])
    op.create_foreign_key(None, 'ssh_tunnels', 'ab_user', ['created_by_fk'], ['id'])
    op.alter_column('tab_state', 'autorun',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('tab_state', 'hide_left_bar',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_index('ix_tab_state_id', table_name='tab_state')
    op.drop_index('ix_table_schema_id', table_name='table_schema')
    op.drop_index('ix_tagged_object_object_id', table_name='tagged_object')
    op.create_foreign_key(None, 'tagged_object', 'dashboards', ['object_id'], ['id'])
    op.create_foreign_key(None, 'tagged_object', 'slices', ['object_id'], ['id'])
    op.create_foreign_key(None, 'tagged_object', 'saved_query', ['object_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.create_index('ix_tagged_object_object_id', 'tagged_object', ['object_id'], unique=False)
    op.create_index('ix_table_schema_id', 'table_schema', ['id'], unique=False)
    op.create_index('ix_tab_state_id', 'tab_state', ['id'], unique=False)
    op.alter_column('tab_state', 'hide_left_bar',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('tab_state', 'autorun',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_constraint(None, 'ssh_tunnels', type_='foreignkey')
    op.drop_constraint(None, 'ssh_tunnels', type_='foreignkey')
    op.drop_constraint(None, 'ssh_tunnels', type_='unique')
    op.drop_constraint(None, 'ssh_tunnels', type_='unique')
    op.create_index('ix_ssh_tunnels_uuid', 'ssh_tunnels', ['uuid'], unique=False)
    op.create_index('ix_ssh_tunnels_database_id', 'ssh_tunnels', ['database_id'], unique=False)
    op.alter_column('ssh_tunnels', 'database_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'sl_tables', type_='unique')
    op.drop_constraint(None, 'sl_table_columns', type_='foreignkey')
    op.drop_constraint(None, 'sl_table_columns', type_='foreignkey')
    op.create_foreign_key('sl_table_columns_table_id_fkey', 'sl_table_columns', 'sl_tables', ['table_id'], ['id'])
    op.create_foreign_key('sl_table_columns_column_id_fkey', 'sl_table_columns', 'sl_columns', ['column_id'], ['id'])
    op.alter_column('sl_columns', 'is_temporal',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_spatial',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_physical',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_partition',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_increase_desired',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_aggregation',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('sl_columns', 'is_additive',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_index('ix_row_level_security_filters_filter_type', 'row_level_security_filters', ['filter_type'], unique=False)
    op.drop_constraint(None, 'report_schedule_user', type_='unique')
    op.create_index('ix_creation_method', 'report_schedule', ['creation_method'], unique=False)
    op.alter_column('report_schedule', 'extra_json',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_index('ix_logs_user_id_dttm', 'logs', ['user_id', 'dttm'], unique=False)
    op.drop_constraint(None, 'key_value', type_='unique')
    op.create_index('ix_key_value_uuid', 'key_value', ['uuid'], unique=False)
    op.create_index('ix_key_value_expires_on', 'key_value', ['expires_on'], unique=False)
    op.drop_constraint(None, 'filter_sets', type_='unique')
    op.alter_column('filter_sets', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint(None, 'embedded_dashboards', type_='foreignkey')
    op.drop_constraint(None, 'embedded_dashboards', type_='foreignkey')
    op.alter_column('embedded_dashboards', 'uuid',
               existing_type=postgresql.UUID(),
               nullable=True)
    op.drop_constraint(None, 'dynamic_plugin', type_='unique')
    op.alter_column('dbs', 'allow_file_upload',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('dashboard_roles', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('annotation', 'layer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('sql_observations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dttm', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('alert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_msg', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], name='sql_observations_alert_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sql_observations_pkey')
    )
    op.create_index('ix_sql_observations_dttm', 'sql_observations', ['dttm'], unique=False)
    op.create_table('slice_email_schedules',
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('crontab', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recipients', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deliver_as_group', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('delivery_type', postgresql.ENUM('attachment', 'inline', name='emaildeliverytype'), autoincrement=False, nullable=True),
    sa.Column('slice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email_format', postgresql.ENUM('visualization', 'data', name='sliceemailreportformat'), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('slack_channel', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='slice_email_schedules_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='slice_email_schedules_created_by_fk_fkey'),
    sa.ForeignKeyConstraint(['slice_id'], ['slices.id'], name='slice_email_schedules_slice_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='slice_email_schedules_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='slice_email_schedules_pkey'),
    sa.UniqueConstraint('uuid', name='uq_slice_email_schedules_uuid')
    )
    op.create_index('ix_slice_email_schedules_active', 'slice_email_schedules', ['active'], unique=False)
    op.create_table('alert_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('scheduled_dttm', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dttm_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dttm_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('alert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], name='alert_logs_alert_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='alert_logs_pkey')
    )
    op.create_table('columns',
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('column_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('groupby', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('filterable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dimension_spec_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verbose_name', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('datasource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('advanced_data_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='columns_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='columns_created_by_fk_fkey'),
    sa.ForeignKeyConstraint(['datasource_id'], ['datasources.id'], name='fk_columns_datasource_id_datasources'),
    sa.PrimaryKeyConstraint('id', name='columns_pkey'),
    sa.UniqueConstraint('column_name', 'datasource_id', name='uq_columns_column_name'),
    sa.UniqueConstraint('uuid', name='uq_columns_uuid')
    )
    op.create_table('druiddatasource_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('datasource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['datasource_id'], ['datasources.id'], name='druiddatasource_user_datasource_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='druiddatasource_user_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='druiddatasource_user_pkey')
    )
    op.create_table('dashboard_email_schedules',
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('crontab', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recipients', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deliver_as_group', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('delivery_type', postgresql.ENUM('attachment', 'inline', name='emaildeliverytype'), autoincrement=False, nullable=True),
    sa.Column('dashboard_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('slack_channel', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='dashboard_email_schedules_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='dashboard_email_schedules_created_by_fk_fkey'),
    sa.ForeignKeyConstraint(['dashboard_id'], ['dashboards.id'], name='dashboard_email_schedules_dashboard_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='dashboard_email_schedules_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dashboard_email_schedules_pkey'),
    sa.UniqueConstraint('uuid', name='uq_dashboard_email_schedules_uuid')
    )
    op.create_index('ix_dashboard_email_schedules_active', 'dashboard_email_schedules', ['active'], unique=False)
    op.create_table('datasources',
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('datasources_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('datasource_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_hidden', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_endpoint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('offset', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cache_timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('perm', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('filter_select_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('params', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('fetch_values_from', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('schema_perm', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('cluster_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_managed_externally', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('external_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], name='fk_datasources_cluster_id_clusters'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='datasources_created_by_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='datasources_pkey'),
    sa.UniqueConstraint('cluster_id', 'datasource_name', name='uq_datasources_cluster_id'),
    sa.UniqueConstraint('uuid', name='uq_datasources_uuid'),
    postgresql_ignore_search_path=False
    )
    op.create_table('alerts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('alerts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('label', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('crontab', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('log_retention', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('grace_period', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipients', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('slice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dashboard_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_eval_dttm', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_state', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('slack_channel', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('validator_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('database_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sql', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('validator_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='alerts_ibfk_3'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='alerts_ibfk_4'),
    sa.ForeignKeyConstraint(['dashboard_id'], ['dashboards.id'], name='alerts_dashboard_id_fkey'),
    sa.ForeignKeyConstraint(['database_id'], ['dbs.id'], name='alerts_database_id_fkey'),
    sa.ForeignKeyConstraint(['slice_id'], ['slices.id'], name='alerts_slice_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='alerts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_alerts_active', 'alerts', ['active'], unique=False)
    op.create_table('clusters',
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clusters_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('cluster_name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('broker_host', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('broker_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('broker_endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('metadata_last_refreshed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cache_timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verbose_name', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('broker_pass', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('broker_user', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='clusters_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='clusters_created_by_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='clusters_pkey'),
    sa.UniqueConstraint('cluster_name', name='clusters_cluster_name_key'),
    sa.UniqueConstraint('uuid', name='uq_clusters_uuid'),
    sa.UniqueConstraint('verbose_name', name='clusters_verbose_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('alert_owner',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('alert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], name='alert_owner_alert_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='alert_owner_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='alert_owner_pkey')
    )
    op.create_table('metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('verbose_name', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('json', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('d3format', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('warning_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('datasource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='metrics_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='metrics_created_by_fk_fkey'),
    sa.ForeignKeyConstraint(['datasource_id'], ['datasources.id'], name='fk_metrics_datasource_id_datasources'),
    sa.PrimaryKeyConstraint('id', name='metrics_pkey'),
    sa.UniqueConstraint('metric_name', 'datasource_id', name='uq_metrics_metric_name'),
    sa.UniqueConstraint('uuid', name='uq_metrics_uuid')
    )
    # ### end Alembic commands ###
