# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""rename to snake_case

Revision ID: 2684073d82a4
Revises: 48cbb571fa3a
Create Date: 2025-02-14 12:54:58.589533

"""

# revision identifiers, used by Alembic.
revision = "2684073d82a4"
down_revision = "48cbb571fa3a"

from importlib import import_module  # noqa: E402

import sqlalchemy as sa  # noqa: E402
from alembic import op  # noqa: E402

from superset.migrations.shared.utils import has_table, table_has_column  # noqa: E402

module1 = import_module(
    "superset.migrations.versions.2023-07-12_20-34_e0f6f91c2055_create_user_favorite_table"
)
module2 = import_module(
    "superset.migrations.versions.2023-07-19_17-54_ee179a490af9_deckgl_path_width_units"
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not has_table("user_favorite_tag"):
        module1.upgrade()

    module2.upgrade()

    # Переименовываем колонки в snake_case

    rename_columns = [
        (
            "sql_metrics",
            "verbose_name_2nd_lang",
            "verbose_name_second_lang",
            sa.Text(),
            True,
        ),
        (
            "table_columns",
            "verbose_name_2nd_lang",
            "verbose_name_second_lang",
            sa.Text(),
            True,
        ),
        (
            "sql_metrics",
            "description_2nd_lang",
            "description_second_lang",
            sa.Text(),
            True,
        ),
        (
            "table_columns",
            "description_2nd_lang",
            "description_second_lang",
            sa.Text(),
            True,
        ),
        ("dashboards", "dashboard_title_RU", "dashboard_title_ru", sa.Text(), True),
        ("slices", "slice_name_RU", "slice_name_ru", sa.Text(), True),
        ("sql_metrics", "verbose_name_RU", "verbose_name_ru", sa.Text(), True),
        ("sql_metrics", "description_RU", "description_ru", sa.Text(), True),
        ("table_columns", "verbose_name_RU", "verbose_name_ru", sa.Text(), True),
        ("table_columns", "description_RU", "description_ru", sa.Text(), True),
        ("sql_metrics", "verbose_name_EN", "verbose_name_en", sa.Text(), True),
        ("sql_metrics", "description_EN", "description_en", sa.Text(), True),
        ("table_columns", "verbose_name_EN", "verbose_name_en", sa.Text(), True),
        ("table_columns", "description_EN", "description_en", sa.Text(), True),
        (
            "user_info",
            "isOnboardingFinished",
            "is_onboarding_finished",
            sa.Boolean(),
            True,
        ),
        (
            "user_info",
            "onboardingStartedTime",
            "onboarding_started_time",
            sa.DateTime(),
            True,
        ),
        ("teams", "isExternal", "is_external", sa.Boolean(), False),
        ("statements", "isNewTeam", "is_new_team", sa.Boolean(), False),
        ("statements", "isExternal", "is_external", sa.Boolean(), False),
    ]

    for table, old_name, new_name, col_type, nullable in rename_columns:
        if table_has_column(table, old_name):
            op.alter_column(
                table,
                old_name,
                new_column_name=new_name,
                existing_type=col_type,
                existing_nullable=nullable,
            )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    module2.downgrade()
    module1.downgrade()
    # ### end Alembic commands ###
