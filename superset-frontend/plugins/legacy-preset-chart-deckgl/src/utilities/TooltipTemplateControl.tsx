/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { useCallback, useEffect, useState } from 'react';
import { styled, t } from '@superset-ui/core';
import { TooltipTemplateEditor } from './TooltipTemplateEditor';

const StyledContainer = styled.div`
  ${({ theme }) => `
    .tooltip-template-control {
      margin-bottom: ${theme.sizeUnit * 2}px;
    }

    .control-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: ${theme.sizeUnit * 2}px;

      h5 {
        margin: 0;
        font-size: ${theme.fontSizeSM}px;
        font-weight: bold;
        color: ${theme.colorText};
      }
    }

    .control-description {
      margin-bottom: ${theme.sizeUnit * 2}px;
      font-size: ${theme.fontSizeSM}px;
      color: ${theme.colorTextSecondary};
      line-height: 1.4;
    }

    .template-status {
      font-size: ${theme.fontSizeSM}px;
      color: ${theme.colorTextSecondary};
      font-style: italic;
      margin-bottom: ${theme.sizeUnit}px;
    }

    .auto-generated-indicator {
      background-color: ${theme.colorSuccessBg};
      color: ${theme.colorSuccessText};
      padding: ${theme.sizeUnit}px ${theme.sizeUnit * 2}px;
      border-radius: ${theme.sizeUnit}px;
      font-size: ${theme.fontSizeSM}px;
      margin-bottom: ${theme.sizeUnit * 2}px;
      border: 1px solid ${theme.colorSuccessBorder};
    }

    .manual-template-indicator {
      background-color: ${theme.colorInfoBg};
      color: ${theme.colorInfoText};
      padding: ${theme.sizeUnit}px ${theme.sizeUnit * 2}px;
      border-radius: ${theme.sizeUnit}px;
      font-size: ${theme.fontSizeSM}px;
      margin-bottom: ${theme.sizeUnit * 2}px;
      border: 1px solid ${theme.colorInfoBorder};
    }

    .reset-button {
      background-color: transparent;
      border: 1px solid ${theme.colorBorder};
      color: ${theme.colorText};
      padding: ${theme.sizeUnit}px ${theme.sizeUnit * 2}px;
      border-radius: ${theme.sizeUnit}px;
      font-size: ${theme.fontSizeSM}px;
      cursor: pointer;
      transition: all 0.2s ease;

      &:hover {
        background-color: ${theme.colorBgTextHover};
        border-color: ${theme.colorBorderSecondary};
      }
    }
  `}
`;

interface TooltipTemplateControlProps {
  value: string;
  onChange: (value: string) => void;
  tooltipContents: any[];
  label?: string;
  description?: string;
  name: string;
  height?: number;
}

export function TooltipTemplateControl({
  value,
  onChange,
  tooltipContents = [],
  label,
  description,
  name,
}: TooltipTemplateControlProps) {
  const [isManuallyEdited, setIsManuallyEdited] = useState(false);
  const [lastTooltipContents, setLastTooltipContents] = useState<any[]>([]);

  // Check if template was manually edited
  useEffect(() => {
    const isAutoGenerated =
      !value ||
      value.includes('Drop columns/metrics') ||
      value.includes('<!-- Available variables:') ||
      value.trim() === '';

    setIsManuallyEdited(!isAutoGenerated);
  }, [value]);

  // Track when tooltip contents change
  useEffect(() => {
    const contentsChanged =
      JSON.stringify(tooltipContents) !== JSON.stringify(lastTooltipContents);
    if (contentsChanged) {
      setLastTooltipContents(tooltipContents);
    }
  }, [tooltipContents, lastTooltipContents]);

  const handleTemplateChange = useCallback(
    (newValue: string) => {
      onChange(newValue);
      setIsManuallyEdited(true);
    },
    [onChange],
  );

  const handleReset = useCallback(() => {
    onChange('');
    setIsManuallyEdited(false);
  }, [onChange]);

  const getStatusMessage = () => {
    if (!tooltipContents || tooltipContents.length === 0) {
      return t(
        'Add fields to "Tooltip contents" above to see available template variables',
      );
    }

    if (isManuallyEdited) {
      return t('Template manually customized');
    }

    return t('Template auto-generated from tooltip contents');
  };

  const getStatusIndicator = () => {
    if (!tooltipContents || tooltipContents.length === 0) {
      return null;
    }

    if (isManuallyEdited) {
      return (
        <div className="manual-template-indicator">
          ðŸ’¡{' '}
          {t(
            'Template manually customized. Changes to tooltip contents will not auto-update this template.',
          )}
        </div>
      );
    }

    return (
      <div className="auto-generated-indicator">
        ðŸ”„{' '}
        {t(
          'Template auto-generated from tooltip contents above. Edit to customize.',
        )}
      </div>
    );
  };

  return (
    <StyledContainer>
      <div className="tooltip-template-control">
        <div className="control-header">
          <h5>{label || t('Customize Tooltip Template')}</h5>
          {isManuallyEdited && (
            <button
              type="button"
              className="reset-button"
              onClick={handleReset}
              title={t('Reset to auto-generated template')}
            >
              {t('Reset Template')}
            </button>
          )}
        </div>

        {description && (
          <div className="control-description">{description}</div>
        )}

        <div className="template-status">{getStatusMessage()}</div>

        {getStatusIndicator()}

        <TooltipTemplateEditor
          value={value}
          onChange={handleTemplateChange}
          availableFields={[]} // Will be extracted from tooltipContents
          name={name}
          tooltipContents={tooltipContents}
        />
      </div>
    </StyledContainer>
  );
}

export default TooltipTemplateControl;
