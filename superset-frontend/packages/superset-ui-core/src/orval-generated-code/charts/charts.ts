/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Superset
 * Superset
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ChartCacheScreenshotResponseSchema,
  ChartCacheWarmUpRequestSchema,
  ChartCacheWarmUpResponseSchema,
  ChartDataAsyncResponseSchema,
  ChartDataQueryContextSchema,
  ChartDataResponseSchema,
  ChartRestApiPost,
  ChartRestApiPut,
  DeleteApiV1Chart200,
  DeleteApiV1ChartParams,
  DeleteApiV1ChartPk200,
  DeleteApiV1ChartPkFavorites200,
  FavoriteIdsSchema,
  GetApiV1Chart200,
  GetApiV1ChartExportParams,
  GetApiV1ChartFavoriteStatusParams,
  GetApiV1ChartIdOrUuid200,
  GetApiV1ChartInfo200,
  GetApiV1ChartInfoParams,
  GetApiV1ChartParams,
  GetApiV1ChartPkCacheScreenshotParams,
  GetApiV1ChartPkDataParams,
  GetApiV1ChartRelatedColumnNameParams,
  N400ResponseResponse,
  N401ResponseResponse,
  N403ResponseResponse,
  N404ResponseResponse,
  N422ResponseResponse,
  N500ResponseResponse,
  PostApiV1Chart201,
  PostApiV1ChartImport200,
  PostApiV1ChartImportBody,
  PostApiV1ChartPkFavorites200,
  PutApiV1ChartPk200,
  RelatedResponseSchema,
} from '.././types';

import { customInstance } from '../../api/mutator';

/**
 * @summary Bulk delete charts
 */
export const deleteApiV1Chart = (params?: DeleteApiV1ChartParams) => {
  return customInstance<DeleteApiV1Chart200>({
    url: `/api/v1/chart/`,
    method: 'DELETE',
    params,
  });
};

export const getDeleteApiV1ChartMutationOptions = <
  TError =
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1Chart>>,
    TError,
    { params?: DeleteApiV1ChartParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1Chart>>,
  TError,
  { params?: DeleteApiV1ChartParams },
  TContext
> => {
  const mutationKey = ['deleteApiV1Chart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1Chart>>,
    { params?: DeleteApiV1ChartParams }
  > = props => {
    const { params } = props ?? {};

    return deleteApiV1Chart(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ChartMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1Chart>>
>;

export type DeleteApiV1ChartMutationError =
  | N401ResponseResponse
  | N403ResponseResponse
  | N404ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Bulk delete charts
 */
export const useDeleteApiV1Chart = <
  TError =
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1Chart>>,
    TError,
    { params?: DeleteApiV1ChartParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1Chart>>,
  TError,
  { params?: DeleteApiV1ChartParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ChartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Gets a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
 * @summary Get a list of charts
 */
export const getApiV1Chart = (
  params?: GetApiV1ChartParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1Chart200>({
    url: `/api/v1/chart/`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiV1ChartQueryKey = (params?: GetApiV1ChartParams) => {
  return [`/api/v1/chart/`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ChartQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Chart>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Chart>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ChartQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Chart>>> = ({
    signal,
  }) => getApiV1Chart(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Chart>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Chart>>
>;
export type GetApiV1ChartQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Get a list of charts
 */

export function useGetApiV1Chart<
  TData = Awaited<ReturnType<typeof getApiV1Chart>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Chart>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new chart
 */
export const postApiV1Chart = (
  chartRestApiPost: ChartRestApiPost,
  signal?: AbortSignal,
) => {
  return customInstance<PostApiV1Chart201>({
    url: `/api/v1/chart/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: chartRestApiPost,
    signal,
  });
};

export const getPostApiV1ChartMutationOptions = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N403ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Chart>>,
    TError,
    { data: ChartRestApiPost },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Chart>>,
  TError,
  { data: ChartRestApiPost },
  TContext
> => {
  const mutationKey = ['postApiV1Chart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Chart>>,
    { data: ChartRestApiPost }
  > = props => {
    const { data } = props ?? {};

    return postApiV1Chart(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ChartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Chart>>
>;
export type PostApiV1ChartMutationBody = ChartRestApiPost;
export type PostApiV1ChartMutationError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N403ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Create a new chart
 */
export const usePostApiV1Chart = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N403ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Chart>>,
    TError,
    { data: ChartRestApiPost },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Chart>>,
  TError,
  { data: ChartRestApiPost },
  TContext
> => {
  const mutationOptions = getPostApiV1ChartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get metadata information about this API resource
 * @summary Get metadata information about this API resource
 */
export const getApiV1ChartInfo = (
  params?: GetApiV1ChartInfoParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1ChartInfo200>({
    url: `/api/v1/chart/_info`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiV1ChartInfoQueryKey = (
  params?: GetApiV1ChartInfoParams,
) => {
  return [`/api/v1/chart/_info`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ChartInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartInfo>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartInfoParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartInfo>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartInfoQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartInfo>>
  > = ({ signal }) => getApiV1ChartInfo(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartInfo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartInfo>>
>;
export type GetApiV1ChartInfoQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Get metadata information about this API resource
 */

export function useGetApiV1ChartInfo<
  TData = Awaited<ReturnType<typeof getApiV1ChartInfo>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartInfoParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartInfo>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartInfoQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Takes a query context constructed in the client and returns payload data response for the given query.
 * @summary Return payload data response for the given query
 */
export const postApiV1ChartData = (
  chartDataQueryContextSchema: ChartDataQueryContextSchema,
  signal?: AbortSignal,
) => {
  return customInstance<ChartDataResponseSchema | ChartDataAsyncResponseSchema>(
    {
      url: `/api/v1/chart/data`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: chartDataQueryContextSchema,
      signal,
    },
  );
};

export const getPostApiV1ChartDataMutationOptions = <
  TError = N400ResponseResponse | N401ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartData>>,
    TError,
    { data: ChartDataQueryContextSchema },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ChartData>>,
  TError,
  { data: ChartDataQueryContextSchema },
  TContext
> => {
  const mutationKey = ['postApiV1ChartData'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ChartData>>,
    { data: ChartDataQueryContextSchema }
  > = props => {
    const { data } = props ?? {};

    return postApiV1ChartData(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ChartDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ChartData>>
>;
export type PostApiV1ChartDataMutationBody = ChartDataQueryContextSchema;
export type PostApiV1ChartDataMutationError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Return payload data response for the given query
 */
export const usePostApiV1ChartData = <
  TError = N400ResponseResponse | N401ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartData>>,
    TError,
    { data: ChartDataQueryContextSchema },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ChartData>>,
  TError,
  { data: ChartDataQueryContextSchema },
  TContext
> => {
  const mutationOptions = getPostApiV1ChartDataMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Takes a query context cache key and returns payload data response for the given query.
 * @summary Return payload data response for the given query
 */
export const getApiV1ChartDataCacheKey = (
  cacheKey: string,
  signal?: AbortSignal,
) => {
  return customInstance<ChartDataResponseSchema>({
    url: `/api/v1/chart/data/${cacheKey}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiV1ChartDataCacheKeyQueryKey = (cacheKey?: string) => {
  return [`/api/v1/chart/data/${cacheKey}`] as const;
};

export const getGetApiV1ChartDataCacheKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  cacheKey: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartDataCacheKeyQueryKey(cacheKey);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>
  > = ({ signal }) => getApiV1ChartDataCacheKey(cacheKey, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!cacheKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartDataCacheKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>
>;
export type GetApiV1ChartDataCacheKeyQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Return payload data response for the given query
 */

export function useGetApiV1ChartDataCacheKey<
  TData = Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
>(
  cacheKey: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartDataCacheKey>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartDataCacheKeyQueryOptions(
    cacheKey,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Download multiple charts as YAML files
 */
export const getApiV1ChartExport = (
  params?: GetApiV1ChartExportParams,
  signal?: AbortSignal,
) => {
  return customInstance<Blob>({
    url: `/api/v1/chart/export/`,
    method: 'GET',
    params,
    responseType: 'blob',
    signal,
  });
};

export const getGetApiV1ChartExportQueryKey = (
  params?: GetApiV1ChartExportParams,
) => {
  return [`/api/v1/chart/export/`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ChartExportQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartExport>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartExportParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartExport>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartExportQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartExport>>
  > = ({ signal }) => getApiV1ChartExport(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartExport>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartExportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartExport>>
>;
export type GetApiV1ChartExportQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Download multiple charts as YAML files
 */

export function useGetApiV1ChartExport<
  TData = Awaited<ReturnType<typeof getApiV1ChartExport>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartExportParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartExport>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartExportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check favorited charts for current user
 */
export const getApiV1ChartFavoriteStatus = (
  params?: GetApiV1ChartFavoriteStatusParams,
  signal?: AbortSignal,
) => {
  return customInstance<FavoriteIdsSchema>({
    url: `/api/v1/chart/favorite_status/`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiV1ChartFavoriteStatusQueryKey = (
  params?: GetApiV1ChartFavoriteStatusParams,
) => {
  return [
    `/api/v1/chart/favorite_status/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ChartFavoriteStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartFavoriteStatusParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartFavoriteStatusQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>
  > = ({ signal }) => getApiV1ChartFavoriteStatus(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartFavoriteStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>
>;
export type GetApiV1ChartFavoriteStatusQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Check favorited charts for current user
 */

export function useGetApiV1ChartFavoriteStatus<
  TData = Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  params?: GetApiV1ChartFavoriteStatusParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartFavoriteStatus>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartFavoriteStatusQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Import chart(s) with associated datasets and databases
 */
export const postApiV1ChartImport = (
  postApiV1ChartImportBody: PostApiV1ChartImportBody,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postApiV1ChartImportBody.formData !== undefined) {
    formData.append(`formData`, postApiV1ChartImportBody.formData);
  }
  if (postApiV1ChartImportBody.overwrite !== undefined) {
    formData.append(`overwrite`, postApiV1ChartImportBody.overwrite.toString());
  }
  if (postApiV1ChartImportBody.passwords !== undefined) {
    formData.append(`passwords`, postApiV1ChartImportBody.passwords);
  }
  if (postApiV1ChartImportBody.ssh_tunnel_passwords !== undefined) {
    formData.append(
      `ssh_tunnel_passwords`,
      postApiV1ChartImportBody.ssh_tunnel_passwords,
    );
  }
  if (postApiV1ChartImportBody.ssh_tunnel_private_key_passwords !== undefined) {
    formData.append(
      `ssh_tunnel_private_key_passwords`,
      postApiV1ChartImportBody.ssh_tunnel_private_key_passwords,
    );
  }
  if (postApiV1ChartImportBody.ssh_tunnel_private_keys !== undefined) {
    formData.append(
      `ssh_tunnel_private_keys`,
      postApiV1ChartImportBody.ssh_tunnel_private_keys,
    );
  }

  return customInstance<PostApiV1ChartImport200>({
    url: `/api/v1/chart/import/`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getPostApiV1ChartImportMutationOptions = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartImport>>,
    TError,
    { data: PostApiV1ChartImportBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ChartImport>>,
  TError,
  { data: PostApiV1ChartImportBody },
  TContext
> => {
  const mutationKey = ['postApiV1ChartImport'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ChartImport>>,
    { data: PostApiV1ChartImportBody }
  > = props => {
    const { data } = props ?? {};

    return postApiV1ChartImport(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ChartImportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ChartImport>>
>;
export type PostApiV1ChartImportMutationBody = PostApiV1ChartImportBody;
export type PostApiV1ChartImportMutationError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Import chart(s) with associated datasets and databases
 */
export const usePostApiV1ChartImport = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartImport>>,
    TError,
    { data: PostApiV1ChartImportBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ChartImport>>,
  TError,
  { data: PostApiV1ChartImportBody },
  TContext
> => {
  const mutationOptions = getPostApiV1ChartImportMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
 * @summary Get related fields data
 */
export const getApiV1ChartRelatedColumnName = (
  columnName: string,
  params?: GetApiV1ChartRelatedColumnNameParams,
  signal?: AbortSignal,
) => {
  return customInstance<RelatedResponseSchema>({
    url: `/api/v1/chart/related/${columnName}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiV1ChartRelatedColumnNameQueryKey = (
  columnName?: string,
  params?: GetApiV1ChartRelatedColumnNameParams,
) => {
  return [
    `/api/v1/chart/related/${columnName}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ChartRelatedColumnNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  columnName: string,
  params?: GetApiV1ChartRelatedColumnNameParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ChartRelatedColumnNameQueryKey(columnName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>
  > = ({ signal }) =>
    getApiV1ChartRelatedColumnName(columnName, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!columnName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartRelatedColumnNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>
>;
export type GetApiV1ChartRelatedColumnNameQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Get related fields data
 */

export function useGetApiV1ChartRelatedColumnName<
  TData = Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  columnName: string,
  params?: GetApiV1ChartRelatedColumnNameParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartRelatedColumnName>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartRelatedColumnNameQueryOptions(
    columnName,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Warms up the cache for the chart. Note for slices a force refresh occurs. In terms of the `extra_filters` these can be obtained from records in the JSON encoded `logs.json` column associated with the `explore_json` action.
 * @summary Warm up the cache for the chart
 */
export const putApiV1ChartWarmUpCache = (
  chartCacheWarmUpRequestSchema: ChartCacheWarmUpRequestSchema,
) => {
  return customInstance<ChartCacheWarmUpResponseSchema>({
    url: `/api/v1/chart/warm_up_cache`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: chartCacheWarmUpRequestSchema,
  });
};

export const getPutApiV1ChartWarmUpCacheMutationOptions = <
  TError = N400ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>,
    TError,
    { data: ChartCacheWarmUpRequestSchema },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>,
  TError,
  { data: ChartCacheWarmUpRequestSchema },
  TContext
> => {
  const mutationKey = ['putApiV1ChartWarmUpCache'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>,
    { data: ChartCacheWarmUpRequestSchema }
  > = props => {
    const { data } = props ?? {};

    return putApiV1ChartWarmUpCache(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ChartWarmUpCacheMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>
>;
export type PutApiV1ChartWarmUpCacheMutationBody =
  ChartCacheWarmUpRequestSchema;
export type PutApiV1ChartWarmUpCacheMutationError =
  | N400ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Warm up the cache for the chart
 */
export const usePutApiV1ChartWarmUpCache = <
  TError = N400ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>,
    TError,
    { data: ChartCacheWarmUpRequestSchema },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ChartWarmUpCache>>,
  TError,
  { data: ChartCacheWarmUpRequestSchema },
  TContext
> => {
  const mutationOptions = getPutApiV1ChartWarmUpCacheMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a chart
 * @summary Get a chart detail information
 */
export const getApiV1ChartIdOrUuid = (
  idOrUuid: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1ChartIdOrUuid200>({
    url: `/api/v1/chart/${idOrUuid}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiV1ChartIdOrUuidQueryKey = (idOrUuid?: string) => {
  return [`/api/v1/chart/${idOrUuid}`] as const;
};

export const getGetApiV1ChartIdOrUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>,
  TError =
    | null
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse,
>(
  idOrUuid: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartIdOrUuidQueryKey(idOrUuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>
  > = ({ signal }) => getApiV1ChartIdOrUuid(idOrUuid, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!idOrUuid,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartIdOrUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>
>;
export type GetApiV1ChartIdOrUuidQueryError =
  | null
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse;

/**
 * @summary Get a chart detail information
 */

export function useGetApiV1ChartIdOrUuid<
  TData = Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>,
  TError =
    | null
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse,
>(
  idOrUuid: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartIdOrUuid>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartIdOrUuidQueryOptions(idOrUuid, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete a chart
 */
export const deleteApiV1ChartPk = (pk: number) => {
  return customInstance<DeleteApiV1ChartPk200>({
    url: `/api/v1/chart/${pk}`,
    method: 'DELETE',
  });
};

export const getDeleteApiV1ChartPkMutationOptions = <
  TError =
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ChartPk>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ChartPk>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['deleteApiV1ChartPk'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ChartPk>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return deleteApiV1ChartPk(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ChartPkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ChartPk>>
>;

export type DeleteApiV1ChartPkMutationError =
  | N401ResponseResponse
  | N403ResponseResponse
  | N404ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Delete a chart
 */
export const useDeleteApiV1ChartPk = <
  TError =
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ChartPk>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ChartPk>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ChartPkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update a chart
 */
export const putApiV1ChartPk = (
  pk: number,
  chartRestApiPut: ChartRestApiPut,
) => {
  return customInstance<PutApiV1ChartPk200>({
    url: `/api/v1/chart/${pk}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: chartRestApiPut,
  });
};

export const getPutApiV1ChartPkMutationOptions = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ChartPk>>,
    TError,
    { pk: number; data: ChartRestApiPut },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ChartPk>>,
  TError,
  { pk: number; data: ChartRestApiPut },
  TContext
> => {
  const mutationKey = ['putApiV1ChartPk'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ChartPk>>,
    { pk: number; data: ChartRestApiPut }
  > = props => {
    const { pk, data } = props ?? {};

    return putApiV1ChartPk(pk, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ChartPkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ChartPk>>
>;
export type PutApiV1ChartPkMutationBody = ChartRestApiPut;
export type PutApiV1ChartPkMutationError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N403ResponseResponse
  | N404ResponseResponse
  | N422ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Update a chart
 */
export const usePutApiV1ChartPk = <
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N403ResponseResponse
    | N404ResponseResponse
    | N422ResponseResponse
    | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ChartPk>>,
    TError,
    { pk: number; data: ChartRestApiPut },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ChartPk>>,
  TError,
  { pk: number; data: ChartRestApiPut },
  TContext
> => {
  const mutationOptions = getPutApiV1ChartPkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Compute and cache a screenshot
 */
export const getApiV1ChartPkCacheScreenshot = (
  pk: number,
  params?: GetApiV1ChartPkCacheScreenshotParams,
  signal?: AbortSignal,
) => {
  return customInstance<
    ChartCacheScreenshotResponseSchema | ChartCacheScreenshotResponseSchema
  >({
    url: `/api/v1/chart/${pk}/cache_screenshot/`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiV1ChartPkCacheScreenshotQueryKey = (
  pk?: number,
  params?: GetApiV1ChartPkCacheScreenshotParams,
) => {
  return [
    `/api/v1/chart/${pk}/cache_screenshot/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ChartPkCacheScreenshotQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  params?: GetApiV1ChartPkCacheScreenshotParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ChartPkCacheScreenshotQueryKey(pk, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>
  > = ({ signal }) => getApiV1ChartPkCacheScreenshot(pk, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!pk,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartPkCacheScreenshotQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>
>;
export type GetApiV1ChartPkCacheScreenshotQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Compute and cache a screenshot
 */

export function useGetApiV1ChartPkCacheScreenshot<
  TData = Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  params?: GetApiV1ChartPkCacheScreenshotParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkCacheScreenshot>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartPkCacheScreenshotQueryOptions(
    pk,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
 * @summary Return payload data response for a chart
 */
export const getApiV1ChartPkData = (
  pk: number,
  params?: GetApiV1ChartPkDataParams,
  signal?: AbortSignal,
) => {
  return customInstance<ChartDataResponseSchema | ChartDataAsyncResponseSchema>(
    { url: `/api/v1/chart/${pk}/data/`, method: 'GET', params, signal },
  );
};

export const getGetApiV1ChartPkDataQueryKey = (
  pk?: number,
  params?: GetApiV1ChartPkDataParams,
) => {
  return [`/api/v1/chart/${pk}/data/`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ChartPkDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartPkData>>,
  TError = N400ResponseResponse | N401ResponseResponse | N500ResponseResponse,
>(
  pk: number,
  params?: GetApiV1ChartPkDataParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkData>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ChartPkDataQueryKey(pk, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartPkData>>
  > = ({ signal }) => getApiV1ChartPkData(pk, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!pk,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartPkData>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartPkDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartPkData>>
>;
export type GetApiV1ChartPkDataQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Return payload data response for a chart
 */

export function useGetApiV1ChartPkData<
  TData = Awaited<ReturnType<typeof getApiV1ChartPkData>>,
  TError = N400ResponseResponse | N401ResponseResponse | N500ResponseResponse,
>(
  pk: number,
  params?: GetApiV1ChartPkDataParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkData>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartPkDataQueryOptions(pk, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Remove the chart from the user favorite list
 */
export const deleteApiV1ChartPkFavorites = (pk: number) => {
  return customInstance<DeleteApiV1ChartPkFavorites200>({
    url: `/api/v1/chart/${pk}/favorites/`,
    method: 'DELETE',
  });
};

export const getDeleteApiV1ChartPkFavoritesMutationOptions = <
  TError = N401ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['deleteApiV1ChartPkFavorites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return deleteApiV1ChartPkFavorites(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ChartPkFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>
>;

export type DeleteApiV1ChartPkFavoritesMutationError =
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Remove the chart from the user favorite list
 */
export const useDeleteApiV1ChartPkFavorites = <
  TError = N401ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ChartPkFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1ChartPkFavoritesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Mark the chart as favorite for the current user
 */
export const postApiV1ChartPkFavorites = (pk: number, signal?: AbortSignal) => {
  return customInstance<PostApiV1ChartPkFavorites200>({
    url: `/api/v1/chart/${pk}/favorites/`,
    method: 'POST',
    signal,
  });
};

export const getPostApiV1ChartPkFavoritesMutationOptions = <
  TError = N401ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['postApiV1ChartPkFavorites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return postApiV1ChartPkFavorites(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ChartPkFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>
>;

export type PostApiV1ChartPkFavoritesMutationError =
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Mark the chart as favorite for the current user
 */
export const usePostApiV1ChartPkFavorites = <
  TError = N401ResponseResponse | N404ResponseResponse | N500ResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ChartPkFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions = getPostApiV1ChartPkFavoritesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get a computed screenshot from cache
 */
export const getApiV1ChartPkScreenshotDigest = (
  pk: number,
  digest: string,
  signal?: AbortSignal,
) => {
  return customInstance<Blob>({
    url: `/api/v1/chart/${pk}/screenshot/${digest}/`,
    method: 'GET',
    responseType: 'blob',
    signal,
  });
};

export const getGetApiV1ChartPkScreenshotDigestQueryKey = (
  pk?: number,
  digest?: string,
) => {
  return [`/api/v1/chart/${pk}/screenshot/${digest}/`] as const;
};

export const getGetApiV1ChartPkScreenshotDigestQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  digest: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ChartPkScreenshotDigestQueryKey(pk, digest);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>
  > = ({ signal }) => getApiV1ChartPkScreenshotDigest(pk, digest, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(pk && digest),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartPkScreenshotDigestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>
>;
export type GetApiV1ChartPkScreenshotDigestQueryError =
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Get a computed screenshot from cache
 */

export function useGetApiV1ChartPkScreenshotDigest<
  TData = Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>,
  TError =
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  digest: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkScreenshotDigest>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartPkScreenshotDigestQueryOptions(
    pk,
    digest,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Compute or get already computed chart thumbnail from cache.
 * @summary Get chart thumbnail
 */
export const getApiV1ChartPkThumbnailDigest = (
  pk: number,
  digest: string,
  signal?: AbortSignal,
) => {
  return customInstance<Blob>({
    url: `/api/v1/chart/${pk}/thumbnail/${digest}/`,
    method: 'GET',
    responseType: 'blob',
    signal,
  });
};

export const getGetApiV1ChartPkThumbnailDigestQueryKey = (
  pk?: number,
  digest?: string,
) => {
  return [`/api/v1/chart/${pk}/thumbnail/${digest}/`] as const;
};

export const getGetApiV1ChartPkThumbnailDigestQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>,
  TError =
    | null
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  digest: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1ChartPkThumbnailDigestQueryKey(pk, digest);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>
  > = ({ signal }) => getApiV1ChartPkThumbnailDigest(pk, digest, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(pk && digest),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ChartPkThumbnailDigestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>
>;
export type GetApiV1ChartPkThumbnailDigestQueryError =
  | null
  | N400ResponseResponse
  | N401ResponseResponse
  | N404ResponseResponse
  | N500ResponseResponse;

/**
 * @summary Get chart thumbnail
 */

export function useGetApiV1ChartPkThumbnailDigest<
  TData = Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>,
  TError =
    | null
    | N400ResponseResponse
    | N401ResponseResponse
    | N404ResponseResponse
    | N500ResponseResponse,
>(
  pk: number,
  digest: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ChartPkThumbnailDigest>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ChartPkThumbnailDigestQueryOptions(
    pk,
    digest,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
