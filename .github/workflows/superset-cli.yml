name: Superset CLI Package Tests

on:
  push:
    branches:
      - "master"
      - "[0-9].[0-9]*"
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]

# cancel previous workflow jobs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  test-superset-cli-package:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: superset-cli
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive

      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.10
        if: steps.check.outputs.superset-cli
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        if: steps.check.outputs.superset-cli
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-development-${{ hashFiles('requirements/development.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-development-
            ${{ runner.os }}-pip-

      - name: Install development requirements
        if: steps.check.outputs.superset-cli
        run: |
          python -m pip install --upgrade pip
          cd ..
          pip install -r requirements/development.txt

      - name: Verify package installation
        if: steps.check.outputs.superset-cli
        run: |
          pip list | grep superset
          python -c "import superset_cli; print('✓ Package imports successfully')"

      - name: Run pytest with coverage
        if: steps.check.outputs.superset-cli
        run: |
          pytest --cov=superset_cli --cov-report=xml --cov-report=term-missing --cov-report=html -v --tb=short

      - name: Test CLI command availability
        if: steps.check.outputs.superset-cli
        run: |
          # Test the main CLI entry point
          superset-extensions --help
          echo "✓ Main CLI command works"

      - name: Test CLI init command
        if: steps.check.outputs.superset-cli
        run: |
          # Test init command with different configurations
          mkdir -p test_workspace && cd test_workspace

          # Test full extension creation
          echo -e "test_full_ext\n1.0.0\nApache-2.0\ny\ny\n" | superset-extensions init
          test -f test_full_ext/extension.json || exit 1
          test -d test_full_ext/frontend || exit 1
          test -d test_full_ext/backend || exit 1
          echo "✓ Full extension creation works"

          # Test frontend-only extension
          echo -e "test_frontend_ext\n1.0.0\nMIT\ny\nn\n" | superset-extensions init
          test -f test_frontend_ext/extension.json || exit 1
          test -d test_frontend_ext/frontend || exit 1
          test ! -d test_frontend_ext/backend || exit 1
          echo "✓ Frontend-only extension creation works"

      - name: Test CLI build command
        if: steps.check.outputs.superset-cli
        run: |
          cd test_workspace/test_full_ext
          superset-extensions build --help
          echo "✓ Build command available"

      - name: Test CLI dev command
        if: steps.check.outputs.superset-cli
        run: |
          cd test_workspace/test_full_ext
          superset-extensions dev --help
          echo "✓ Dev command available"

      - name: Test CLI validate command
        if: steps.check.outputs.superset-cli
        run: |
          cd test_workspace/test_full_ext
          superset-extensions validate
          echo "✓ Validate command works"

      - name: Validate generated file contents
        if: steps.check.outputs.superset-cli
        run: |
          cd test_workspace/test_full_ext

          # Check extension.json structure
          python -c "
          import json
          with open('extension.json') as f:
              data = json.load(f)
          assert data['name'] == 'test_full_ext'
          assert data['version'] == '1.0.0'
          assert data['license'] == 'Apache-2.0'
          assert 'frontend' in data
          assert 'backend' in data
          print('✓ extension.json has correct structure')
          "

          # Check frontend package.json
          python -c "
          import json
          with open('frontend/package.json') as f:
              data = json.load(f)
          assert data['name'] == 'test_full_ext'
          assert '@apache-superset/core' in data['peerDependencies']
          print('✓ frontend/package.json has correct structure')
          "

      - name: Upload coverage reports to Codecov
        if: steps.check.outputs.superset-cli
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: superset-cli
          name: superset-cli-coverage
          fail_ci_if_error: false

      - name: Upload HTML coverage report
        if: steps.check.outputs.superset-cli
        uses: actions/upload-artifact@v4
        with:
          name: superset-cli-coverage-html
          path: htmlcov/
