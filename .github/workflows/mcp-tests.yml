name: MCP Service Tests

on:
  pull_request:
    paths:
      - 'superset/mcp_service/**'
      - '.github/workflows/mcp-tests.yml'
  workflow_dispatch:
    inputs:
      test_plan:
        description: 'Test plan to execute'
        required: false
        default: 'MCP_CHART_TEST_PLAN.md'
        type: choice
        options:
          - MCP_CHART_TEST_PLAN.md
          - ENTITY_TESTING_PLAN.md
          - ALL

jobs:
  mcp-integration-tests:
    runs-on: ubuntu-latest
    # Can also run in Codespaces
    environment: ${{ github.event_name == 'pull_request' && 'development' || 'production' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: superset
          POSTGRES_PASSWORD: superset
          POSTGRES_DB: superset
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            libffi-dev \
            libsasl2-dev \
            libldap2-dev \
            libxi6 \
            libgconf-2-4 \
            chromium-browser \
            firefox \
            geckodriver

      - name: Create virtual environment and install Superset
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install -r requirements/testing.txt
          pip install anthropic  # For Claude CLI

      - name: Initialize Superset
        env:
          SUPERSET_CONFIG_PATH: /tmp/superset_config.py
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: superset
          DATABASE_PASSWORD: superset
          DATABASE_DB: superset
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          source venv/bin/activate

          # Create config
          cat > /tmp/superset_config.py << EOF
          import os
          SECRET_KEY = 'test-secret-key-for-ci'
          SQLALCHEMY_DATABASE_URI = 'postgresql://superset:superset@localhost:5432/superset'

          REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
          REDIS_PORT = os.environ.get("REDIS_PORT", "6379")

          CACHE_CONFIG = {
              'CACHE_TYPE': 'RedisCache',
              'CACHE_KEY_PREFIX': 'superset_',
              'CACHE_REDIS_HOST': REDIS_HOST,
              'CACHE_REDIS_PORT': REDIS_PORT,
              'CACHE_REDIS_DB': 1,
          }

          # MCP Settings
          MCP_AUTH_ENABLED = False  # Disable auth for testing
          SUPERSET_WEBSERVER_ADDRESS = "http://localhost:8088"
          EOF

          # Initialize database
          superset db upgrade
          superset fab create-admin --username admin --firstname Admin --lastname User --email admin@example.com --password admin
          superset init

          # Load test data
          superset load-examples --force --only-metadata

      - name: Start Superset and MCP Service
        run: |
          source venv/bin/activate

          # Start Superset in background
          superset run -p 8088 --with-threads --reload --debugger &
          SUPERSET_PID=$!

          # Start MCP service in background
          superset mcp run --port 5008 --debug &
          MCP_PID=$!

          # Wait for services to be ready
          echo "Waiting for services to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8088/health && lsof -i :5008; then
              echo "Services are ready!"
              break
            fi
            sleep 2
          done

          # Save PIDs for cleanup
          echo $SUPERSET_PID > /tmp/superset.pid
          echo $MCP_PID > /tmp/mcp.pid

      - name: Install Claude CLI
        run: |
          # Install Claude CLI (when available)
          # For now, we'll use a mock or API directly
          echo "Claude CLI setup would go here"

          # Alternative: Use Anthropic Python SDK
          pip install anthropic

      - name: Run MCP Tests
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          TEST_PLAN: ${{ github.event.inputs.test_plan || 'MCP_CHART_TEST_PLAN.md' }}
        run: |
          source venv/bin/activate
          cd superset/mcp_service

          # Make script executable
          chmod +x run_mcp_tests.sh

          # Run tests
          if [ "$TEST_PLAN" = "ALL" ]; then
            # Run all test plans
            for plan in *TEST_PLAN.md *TESTING_PLAN.md; do
              echo "Running $plan..."
              ./run_mcp_tests.sh "$plan" || true
            done
          else
            # Run specific test plan
            ./run_mcp_tests.sh "$TEST_PLAN"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mcp-test-results
          path: |
            superset/mcp_service/test_results/
            superset/mcp_service/test_results/report.html

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'superset/mcp_service/test_results/report.html';

            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              // Extract summary from HTML
              const matches = report.match(/Total: (\d+).*Passed: (\d+).*Failed: (\d+)/);

              if (matches) {
                const [_, total, passed, failed] = matches;
                const body = `## MCP Test Results

                - **Total Tests**: ${total}
                - **Passed**: ✅ ${passed}
                - **Failed**: ❌ ${failed}

                [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            }

      - name: Cleanup
        if: always()
        run: |
          # Kill services
          [ -f /tmp/superset.pid ] && kill $(cat /tmp/superset.pid) || true
          [ -f /tmp/mcp.pid ] && kill $(cat /tmp/mcp.pid) || true
