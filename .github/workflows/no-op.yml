# no-op.yml
#
# Purpose:
# This workflow provides a workaround for the "required status checks" feature in GitHub Actions
# when using path-specific conditions in other workflows. Required checks might remain in a "Pending"
# state if the conditions are not met, thus blocking pull requests from being merged.
# This no-op (no operation) workflow provides dummy success statuses for these required jobs when
# the real jobs do not run due to path-specific conditions.
#
# How it works:
# - It defines jobs with the same names as the required jobs in the main workflows.
# - These jobs simply execute a command (`exit 0`) to succeed immediately.
# - When a pull request is created or updated, both this no-op workflow and the main workflows are triggered.
# - If the main workflows' jobs don't run (due to path conditions), these no-op jobs provide successful statuses.
# - If the main workflows' jobs do run and fail, their failure statuses take precedence,
#   ensuring that pull requests are not merged with failing checks.
#
# Usage:
# - Ensure that the job names in this workflow match exactly the names of the corresponding jobs in the main workflows.
# - This workflow should be kept as-is, without path-specific conditions.

name: No Operation Checks
on: pull_request

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: No-op for frontend-build
        run: |
          echo "This is a no-op step for frontend-build to ensure a successful status."
          exit 0

  pre-commit:
    strategy:
      matrix:
        python-version: ["3.9"]
    runs-on: ubuntu-latest
    steps:
      - name: No-op for pre-commit
        run: |
          echo "This is a no-op step for pre-commit to ensure a successful status."
          exit 0

  python-lint:
    strategy:
      matrix:
        python-version: ["3.9"]
    runs-on: ubuntu-latest
    steps:
      - name: No-op for python-lint
        run: |
          echo "This is a no-op step for python-lint to ensure a successful status."
          exit 0
