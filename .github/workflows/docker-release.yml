# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# GitHub Actions CI/CD workflow derived from .gitlab-ci.yml
# Original GitLab pipeline stages:
#   build: docker build -t halloatkipde/superset-udp:latest .
#   release (manual): docker tag latest with <pipeline_id>-<short_sha> and push that tag
# This workflow mirrors that behavior:
#   - On push to master: build the Docker image (validation only, no push by default)
#   - On manual dispatch: build/tag/push the release tag <run_id>-<short_sha>
# Adjust DOCKER_IMAGE and optionally enable pushing :latest if desired.

name: Docker Build & Release

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      push_latest:
        description: "Also push the :latest tag (in addition to the release tag)"
        required: false
        default: "false"
      image_name:
        description: "Override full image name (default halloatkipde/superset-udp)"
        required: false
        default: "halloatkipde/superset-udp"

# Avoid overlapping release runs on the same ref
concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  DEFAULT_IMAGE: halloatkipde/superset-udp

jobs:
  build:
    name: Build (no push)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (validation only)
        run: |
          IMAGE=${DEFAULT_IMAGE}
          echo "Building $IMAGE:latest (not pushed)"
          docker build -t $IMAGE:latest .

  release:
    name: Manual Release
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Resolve image name
        id: meta
        run: |
          IMAGE_INPUT="${{ github.event.inputs.image_name }}"
          if [ -z "$IMAGE_INPUT" ]; then IMAGE_INPUT="$DEFAULT_IMAGE"; fi
          SHORT_SHA=${GITHUB_SHA::8}
          TAG="${GITHUB_RUN_ID}-${SHORT_SHA}"
          echo "image=$IMAGE_INPUT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "Resolved tag: $TAG"

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          docker build -t $IMAGE:latest .

      - name: Tag release image
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
            TAG=${{ steps.meta.outputs.tag }}
            docker tag $IMAGE:latest $IMAGE:$TAG

      - name: Push release tag
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          TAG=${{ steps.meta.outputs.tag }}
          docker push $IMAGE:$TAG

      - name: Optionally push latest
        if: ${{ github.event.inputs.push_latest == 'true' }}
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          echo "Pushing latest tag as requested"
          docker push $IMAGE:latest

      - name: Summary
        run: |
          echo "Image: ${{ steps.meta.outputs.image }}"
          echo "Release tag pushed: ${{ steps.meta.outputs.tag }}"
          echo "Short SHA: ${{ steps.meta.outputs.short_sha }}"
