name: client-portal-pipeline

on:
  push:
    branches:
      - "main"
      - "[0-9].[0-9]*"
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      use_dashboard:
        description: 'Use Cypress Dashboard (true/false)'
        required: false
        default: 'false'
      ref:
        description: 'The branch or tag to checkout'
        required: false
        default: ''
      pr_id:
        description: 'The pull request ID to checkout'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  TAG: sagarakashx/superset:GHA-${{ github.run_id }}

jobs:

#Python Backend Unit Testing

  # python-unit:
  #   runs-on: gcp-ubuntu-x86
  #   strategy:
  #     matrix:
  #       python-version: ["current"]
  #   env:
  #     PYTHONPATH: ${{ github.workspace }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false
  #         submodules: recursive
      
  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"   # or 3.11, depending on your project


  #     - name: Install system deps for mysqlclient & psycopg2
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y \
  #           pkg-config \
  #           default-libmysqlclient-dev \
  #           libpq-dev \
  #           build-essential

  #     - name: Install test dependencies
  #       run: |
  #         sudo apt-get update && sudo apt-get -y install libldap2-dev libsasl2-dev
  #         python -m pip install --upgrade pip
  #         python -m pip install pytest pytest-cov
  #         python -m pip install setuptools wheel uv
  #         uv pip install --system -r requirements/development.txt
          
  #     # - name: Check for file changes
  #     #   id: check
  #     #   uses: ./.github/actions/change-detector/
  #     #   with:
  #     #     token: ${{ secrets.GITHUB_TOKEN }}
  #     # - name: Setup Python
  #     #   uses: ./.github/actions/setup-backend/
  #     #   #if: steps.check.outputs.python
  #     #   with:
  #     #     python-version: ${{ matrix.python-version }}
  #     - name: Run Unit Tests
  #       #if: steps.check.outputs.python
  #       env:
  #         SUPERSET_TESTENV: true
  #         SUPERSET_SECRET_KEY: not-a-secret
  #       run: |
  #         set -a
  #         [ -f docker/.env ] && source docker/.env
  #         [ -f docker/.env-local ] Python Backend Unit Testing

  python-unit:
    runs-on: gcp-ubuntu-x86
    strategy:
      matrix:
        python-version: ["current"]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"   # or 3.11, depending on your project


      - name: Install system deps for mysqlclient & psycopg2
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            default-libmysqlclient-dev \
            libpq-dev \
            build-essential

      - name: Install test dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install libldap2-dev libsasl2-dev
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          python -m pip install setuptools wheel uv
          uv pip install --system -r requirements/development.txt
          
      # - name: Check for file changes
      #   id: check
      #   uses: ./.github/actions/change-detector/
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Setup Python
      #   uses: ./.github/actions/setup-backend/
      #   #if: steps.check.outputs.python
      #   with:
      #     python-version: ${{ matrix.python-version }}
      - name: Run Unit Tests
        #if: steps.check.outputs.python
        env:
          SUPERSET_TESTENV: true
          SUPERSET_SECRET_KEY: not-a-secret
        run: |
          set -a
          [ -f docker/.env ] && source docker/.env
          [ -f docker/.env-local ] && source docker/.env-local
          set +a
          pytest --durations-min=0.5 --cov-report= --cov=superset ./tests/common ./tests/unit_tests --cache-clear --maxfail=50&& source docker/.env-local
          set +a
          pytest --durations-min=0.5 --cov-report= --cov=superset ./tests/common ./tests/unit_tests --cache-clear --maxfail=50

    
  integration-test-mysql:
    needs: python-unit
    if: always()
    runs-on: gcp-ubuntu-x86
    env:
      PYTHONPATH: ${{ github.workspace }}
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      REDIS_PORT: 16379
      SUPERSET__SQLALCHEMY_DATABASE_URI: |
        mysql+mysqldb://superset:superset@127.0.0.1:13306/superset?charset=utf8mb4&binary_prefix=true
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: root
    #     ports:
    #       - 13306:3306
    #     options: >-
    #       --health-cmd="mysqladmin ping --silent"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5
    #   redis:
    #     image: redis:7-alpine
    #     options: --entrypoint redis-server
    #     ports:
    #       - 16379:6379
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start MySQL container
        run: |
          docker rm -f mysql-test || true
          docker run -d \
            --name mysql-test \
            -e MYSQL_ROOT_PASSWORD=root \
            -p 13306:3306 \
            mysql:8.0

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec mysql-test mysqladmin ping -h"127.0.0.1" --silent; then
              echo "MySQL is ready"
              exit 0
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL did not become ready in time" >&2
          exit 1

      - name: Start Redis container
        run: |
          docker rm -f redis-test || true
          docker run -d \
            --name redis-test \
            -p 16379:6379 \
            redis:7-alpine

      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Setup Python
      #   uses: ./.github/actions/setup-backend/
      #   #if: steps.check.outputs.python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"   # or 3.11, depending on your project


      - name: Install system deps for mysqlclient & psycopg2
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            default-libmysqlclient-dev \
            libpq-dev \
            build-essential

      - name: Install test dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install libldap2-dev libsasl2-dev
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov setuptools wheel uv
          uv pip install --system -r requirements/development.txt
      - name: Setup MySQL
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: setup-mysql
      - name: Start Celery worker
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: celery-worker
      - name: Python integration tests (MySQL)
        env: 
          FLASK_APP: superset.app:create_app
        #if: steps.check.outputs.python
        run: |
          ./scripts/python_tests.sh
      - name: Upload code coverage
        uses: codecov/codecov-action@v5
        with:
          flags: python,mysql
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        
  integration-test-postgres:
    needs: integration-test-mysql
    if: always()
    runs-on: gcp-ubuntu-x86
    strategy:
      matrix:
        python-version: ["current"]
    env:
      PYTHONPATH: ${{ github.workspace }}
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      REDIS_PORT: 16379
      SUPERSET__SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset:superset@127.0.0.1:15432/superset
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: superset
          POSTGRES_PASSWORD: superset
        ports:
          # Use custom ports for services to avoid accidentally connecting to
          # GitHub action runner's default installations
          - 15432:5432
      # redis:
      #   image: redis:7-alpine
      #   ports:
      #     - 16379:6379
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Start Redis container
        run: |
          docker rm -f redis-test || true
          docker run -d \
            --name redis-test \
            -p 16379:6379 \
            redis:7-alpine

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"   # or 3.11, depending on your project


      - name: Install system deps for mysqlclient & psycopg2
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            default-libmysqlclient-dev \
            libpq-dev \
            build-essential \
            postgresql-client

      - name: Install test dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install libldap2-dev libsasl2-dev
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov setuptools wheel uv
          uv pip install --system -r requirements/development.txt
          
      # - name: Setup Python
      #   uses: ./.github/actions/setup-backend/
      #   #if: steps.check.outputs.python
      #   with:
      #     python-version: ${{ matrix.python-version }}
      - name: Setup Postgres
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: |
            setup-postgres
      - name: Start Celery worker
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: celery-worker
      - name: Python integration tests (PostgreSQL)
        env: 
           FLASK_APP: superset.app:create_app
        #if: steps.check.outputs.python
        run: |
          ./scripts/python_tests.sh
      - name: Upload code coverage
        uses: codecov/codecov-action@v5
        with:
          flags: python,postgres
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  integration-test-sqlite:
    needs: integration-test-postgres
    if: always()
    runs-on: gcp-ubuntu-x86
    env:
      PYTHONPATH: ${{ github.workspace }}
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      REDIS_PORT: 16379
      SUPERSET__SQLALCHEMY_DATABASE_URI: |
        sqlite:///${{ github.workspace }}/.temp/superset.db?check_same_thread=true
      SUPERSET__SQLALCHEMY_EXAMPLES_URI: |
        sqlite:///${{ github.workspace }}/.temp/examples.db?check_same_thread=true
    # services:
    #   redis:
    #     image: redis:7-alpine
    #     ports:
    #       - 16379:6379
    steps:
      - name: Start Redis container
        run: |
          docker rm -f redis-test || true
          docker run -d \
            --name redis-test \
            -p 16379:6379 \
            redis:7-alpine
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Setup Python
      #   uses: ./.github/actions/setup-backend/
      #   #if: steps.check.outputs.python

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"   # or 3.11, depending on your project


      - name: Install system deps for mysqlclient & psycopg2
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            default-libmysqlclient-dev \
            libpq-dev \
            build-essential

      - name: Install test dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install libldap2-dev libsasl2-dev
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov setuptools wheel uv
          uv pip install --system -r requirements/development.txt
          
      - name: Install dependencies
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: |
            # sqlite needs this working directory
            mkdir ${{ github.workspace }}/.temp
      - name: Start Celery worker
        #if: steps.check.outputs.python
        uses: ktmud/cached-dependencies@v1
        with:
          run: celery-worker
      - name: Python integration tests (SQLite)
        env: 
           FLASK_APP: superset.app:create_app
        #if: steps.check.outputs.python
        run: |
          ./scripts/python_tests.sh
      - name: Upload code coverage
        uses: codecov/codecov-action@v5
        with:
          flags: python,sqlite
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

# Python Backend Build

  matrix_build:
    needs: integration-test-sqlite
    if: always()
    runs-on: gcp-ubuntu-x86
    outputs:
      matrix_config: ${{ steps.set_matrix.outputs.matrix_config }}
    steps:
      - id: set_matrix
        run: |
          MATRIX_CONFIG=$(if [ "${{ github.event_name }}" == "pull_request" ]; then echo '["lean"]'; else echo '["lean"]'; fi)
          echo "matrix_config=${MATRIX_CONFIG}" >> $GITHUB_OUTPUT
          echo $GITHUB_OUTPUT

  docker-build:
    name: docker-build
    needs:
    - matrix_build
    if: always()
    runs-on: gcp-ubuntu-x86
    strategy:
      matrix:
        build_preset: ${{fromJson(needs.matrix_build.outputs.matrix_config)}}
      fail-fast: false
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: sagarakashx/superset:GHA-${{ matrix.build_preset }}-${{ github.run_id }}

    steps:

      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Environment
        #if: steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker
        uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          build: "true"

      - name: Setup supersetbot
        #if: steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker
        uses: ./.github/actions/setup-supersetbot/

      - name: Build Docker Image
        #if: steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHORT_SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
        run: |
          # Single platform builds in pull_request context to speed things up
          if [ "${{ github.event_name }}" = "push" ]; then
            PLATFORM_ARG="--platform linux/arm64 --platform linux/amd64"
            # can only --load images in single-platform builds
            PUSH_OR_LOAD="--push"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            PLATFORM_ARG="--platform linux/amd64"
            PUSH_OR_LOAD="--load"
          fi

          FULL_SHA=${SHORT_SHA}
          SHORT_TAG=${FULL_SHA:0:7}
          GHA_TAG=GHA-${RUN_ID}
          IMAGE_NAME=sagarakashx/superset

          docker buildx build \
          $PLATFORM_ARG \
          --build-arg INCLUDE_CHROMIUM=false \
          --target lean \
          --cache-from=type=registry,ref=sagarakashx/superset-cache:3.10-slim-bookworm \
          --cache-to=type=registry,mode=max,ref=sagarakashx/superset-cache:3.10-slim-bookworm \
          $PUSH_OR_LOAD \
          -t $IMAGE_NAME:$FULL_SHA \
          -t $IMAGE_NAME:$SHORT_TAG \
          -t $IMAGE_NAME:$GHA_TAG \
          -t $IMAGE_NAME:latest \
          -t $IMAGE_TAG \
          .

          # supersetbot docker \
          #   $PUSH_OR_LOAD \
          #   --preset ${{ matrix.build_preset }} \
          #   --context "$EVENT" \
          #   --context-ref "$RELEASE" $FORCE_LATEST \
          #   --extra-flags "--build-arg INCLUDE_CHROMIUM=false --tag $IMAGE_TAG" \
          #   $PLATFORM_ARG

      - name: Set output image tag
        id: set-output
        run: echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      # in the context of push (using multi-platform build), we need to pull the image locally
      - name: Docker pull
        if: github.event_name == 'push' && (steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker)
        run:  docker pull $IMAGE_TAG

      - name: Print docker stats
        #if: steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker
        run: |
          echo "SHA: ${{ github.sha }}"
          echo "IMAGE: $IMAGE_TAG"
          docker images $IMAGE_TAG
          docker history $IMAGE_TAG

      - name: docker-compose sanity check
        #if: (steps.check.outputs.python || steps.check.outputs.frontend || steps.check.outputs.docker) && (matrix.build_preset == 'dev' || matrix.build_preset == 'lean')
        shell: bash
        run: |
          export SUPERSET_BUILD_TARGET=${{ matrix.build_preset }}
          # This should reuse the CACHED image built in the previous steps
          docker compose build superset-init --build-arg DEV_MODE=false --build-arg INCLUDE_CHROMIUM=false
          docker compose up superset-init --exit-code-from superset-init

  # docker-compose-image-tag:
  #   needs: docker-build
  #   runs-on: ubuntu-x86
  #   env:
  #     IMAGE_TAG: sagarakashx/superset:GHA-${{ matrix.build_preset }}-${{ github.run_id }}
  #   steps:
  #     - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
  #       uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false
  #     - name: Check for file changes
  #       id: check
  #       uses: ./.github/actions/change-detector/
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup Docker Environment
  #       #if: steps.check.outputs.docker
  #       uses: ./.github/actions/setup-docker
  #       with:
  #         dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
  #         dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
  #         build: "false"
  #         install-docker-compose: "true"
  #     - name: Set image tag for compose
  #       run: |
  #         echo "SUPERSET_IMAGE=${IMAGE_TAG}" > docker/.env-local
  #         cat docker/.env-local
  #     - name: docker-compose sanity check
  #       #if: steps.check.outputs.docker
  #       shell: bash
  #       run: |
  #         docker compose -f docker-compose-image-tag.yml up superset-init --exit-code-from superset-init

#Frontend Build

  frontend-build:
    runs-on: gcp-ubuntu-x86
    outputs:
      should-run: ${{ steps.check.outputs.frontend }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check for File Changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        #if: steps.check.outputs.frontend
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker buildx build \
            -t $TAG \
            --cache-from=type=registry,ref=sagarakashx/superset-cache:3.10-slim-bookworm \
            --target superset-node-ci \
            .
      - name: npm run test with coverage
        run: |
          mkdir -p ${{ github.workspace }}/superset-frontend/coverage
          docker run \
          -v ${{ github.workspace }}/superset-frontend/coverage:/app/superset-frontend/coverage \
          --rm $TAG \
          bash -c \
          "npm run test -- --coverage --shard=1/8 --coverageReporters=json-summary"

      # - name: Upload Coverage Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-artifacts-${{ matrix.shard }}
      #     path: superset-frontend/coverage

      # - name: Download Coverage Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     pattern: coverage-artifacts-*
      #     path: coverage/

      # - name: Show Files
      #   run: find superset-frontend/coverage/

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 23

      # - name: Merge Code Coverage
      #   run: npx nyc merge superset-frontend/coverage/ merged-output/coverage-summary.json

      # - name: Upload Code Coverage
      #   uses: codecov/codecov-action@v5
      #   with:
      #     flags: javascript
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     verbose: true
      #     files: merged-output/coverage-summary.json
      #     slug: apache/superset

      - name: superset-ui/core coverage
        run: |
          docker run --rm $TAG bash -c \
          "npm run core:cover"

      - name: eslint
        run: |
          docker run --rm $TAG bash -c \
          "npm i && npm run eslint -- . --quiet"

      - name: tsc
        run: |
          docker run --rm $TAG bash -c \
          "npm run type"

      - name: Build Plugins Packages
        run: |
          docker run --rm $TAG bash -c \
          "npm run plugins:build"

      - name: Build Plugins Storybook
        run: |
          docker run --rm $TAG bash -c \
          "npm run plugins:build-storybook"


#E2E testing

  # e2e:
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       #parallel_id: [0, 1, 2, 3, 4, 5]
  #       parallel_id: [0]
  #       browser: ["chrome"]
  #       app_root: ["", "/app/prefix"]
  #   env:
  #     SUPERSET_ENV: development
  #     SUPERSET_CONFIG: tests.integration_tests.superset_test_config
  #     SUPERSET__SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset:superset@127.0.0.1:15432/superset
  #     PYTHONPATH: ${{ github.workspace }}
  #     REDIS_PORT: 16379
  #     FLASK_APP: superset.app:create_app
  #     USE_DASHBOARD: ${{ github.event.inputs.use_dashboard == 'true' || 'false' }}
  #   services:
  #     postgres:
  #       image: postgres:16-alpine
  #       env:
  #         POSTGRES_USER: superset
  #         POSTGRES_PASSWORD: superset
  #       ports: [15432:5432]
  #     redis:
  #       image: redis:7-alpine
  #       ports: [16379:6379]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false
  #         submodules: recursive
  #     - id: check
  #       uses: ./.github/actions/change-detector/
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: ./.github/actions/setup-backend/
  #     - uses: ktmud/cached-dependencies@v1
  #       with:
  #         run: |
  #           setup-postgres
  #           testdata
  #           npm-install
  #           build-instrumented-assets
  #           cypress-install
  #     - uses: ktmud/cached-dependencies@v1
  #       env:
  #         CYPRESS_BROWSER: ${{ matrix.browser }}
  #         PARALLEL_ID: ${{ matrix.parallel_id }}
  #         PARALLELISM: 6
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         NODE_OPTIONS: "--max-old-space-size=4096"
  #         FLASK_APP: superset.app:create_app
  #       with:
  #         run: cypress-run-all ${{ env.USE_DASHBOARD }} ${{ matrix.app_root }}
  #     - uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         path: ${{ github.workspace }}/superset-frontend/cypress-base/cypress/screenshots
  #         name: cypress-artifact-${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}-${{ matrix.parallel_id }}

  # Uncomment to enable deployment
  # deploy:
  #   name: Deploy to EC2
  #   needs: [python-unit, python-integration, python-build, frontend, e2e]
  #   runs-on: gcp-ubuntu-x86
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Decode SSH key
  #       run: |
  #         echo "$EC2_SSH_KEY" | base64 -d > ec2_key.pem
  #         chmod 600 ec2_key.pem
  #     - name: Deploy via SSH
  #       run: |
  #         ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
  #           cd /home/ec2-user/superset
  #           git pull origin master
  #           docker compose pull
  #           docker compose up -d
  #         EOF