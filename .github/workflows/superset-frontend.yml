name: "Frontend Build CI (unit tests, linting & sanity checks)"

on:
  push:
    branches:
      - "master"
      - "[0-9].[0-9]*"
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]

# cancel previous workflow jobs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  frontend-build:
    runs-on: ubuntu-24.04
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Environment
        if: steps.check.outputs.frontend
        uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          build: "true"

      - name: Setup supersetbot
        if: steps.check.outputs.frontend
        uses: ./.github/actions/setup-supersetbot/

      - name: Build Docker Image
        if: steps.check.outputs.frontend
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="superset-node-${{ github.sha }}"

          supersetbot docker \
            --load \
            --preset superset-node-ci \
            --platform "linux/amd64" \
            --extra-flags "--tag $TAG"

          docker save $TAG | gzip > superset-node.tar.gz

      - name: Upload Docker Image Artifact
        if: steps.check.outputs.frontend
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: superset-node.tar.gz

  sharded-jest-tests:
    needs: frontend-build
    if: needs.frontend-build.result == 'success'
    strategy:
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8]
    runs-on: ubuntu-22.04
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i superset-node.tar.gz

      - name: npm run test with coverage
        run: |
          mkdir -p ${{ github.workspace }}/coverage
          docker run \
          --rm superset-node-${{ github.sha }} \
          -v ${{ github.workspace }}/coverage:/app/superset-frontend/coverage \
          bash -c \
          'npm run test -- --coverage --silent --shard=${{ matrix.shard }}/8 --coverageReporters="json-summary" && find ./coverage'
          find ${{ github.workspace }}/coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts-${{ matrix.shard }}
          path: coverage/

  report-coverage:
    needs: [sharded-jest-tests]
    if: needs.frontend-build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-artifacts
          merge-multiple: true
          pattern: coverage/*

      - name: Show files
        run: find .

      - name: Merge Code Coverage
        run: npx nyc merge coverage/ merged-output/merged-coverage.json

      - name: Upload code coverage
        uses: codecov/codecov-action@v5
        with:
          flags: javascript
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  core-cover:
    needs: frontend-build
    if: needs.frontend-build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i superset-node.tar.gz

      - name: superset-ui/core coverage
        run: |
          docker run --rm superset-node-${{ github.sha }} bash -c \
          "npm run core:cover"

  lint-frontend:
    needs: frontend-build
    if: needs.frontend-build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i superset-node.tar.gz

      - name: eslint
        run: |
          docker run --rm superset-node-${{ github.sha }} bash -c \
          "npm i && npm run eslint -- . --quiet"
      - name: tsc
        run: |
          docker run --rm superset-node-${{ github.sha }} bash -c \
          "npm run type"

  validate-frontend:
    needs: frontend-build
    if: needs.frontend-build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i superset-node.tar.gz

      - name: Build plugins packages
        run: |
          docker run --rm superset-node-${{ github.sha }} bash -c \
          "npm run plugins:build"
      - name: Build plugins Storybook
        run: |
          docker run --rm superset-node-${{ github.sha }} bash -c \
          "npm run plugins:build-storybook"
